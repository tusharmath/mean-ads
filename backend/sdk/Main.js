// Generated by CoffeeScript 1.9.1
var ClassProvider, CommandExecutor, HostNameBuilder, Inject, Main, WindowProvider, annotate, ref,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  slice = [].slice;

ref = require('di'), annotate = ref.annotate, Inject = ref.Inject, ClassProvider = ref.ClassProvider;

CommandExecutor = require('./CommandExecutor');

WindowProvider = require('../providers/WindowProvider');

HostNameBuilder = require('./HostNameBuilder');

Main = (function() {
  function Main(exec, windowP, host) {
    this.exec = exec;
    this.windowP = windowP;
    this.host = host;
    this.ma = bind(this.ma, this);
  }

  Main.prototype.ma = function() {
    var args, command;
    command = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    return this.exec.execute(command, args);
  };

  Main.prototype.setup = function() {
    var arg2, cmd, i, len, ref1, savedArgs, window;
    window = this.windowP.window();
    if (window.ma) {
      this.host.setup();
      if (window.ma.q) {
        ref1 = window.ma.q;
        for (i = 0, len = ref1.length; i < len; i++) {
          savedArgs = ref1[i];
          cmd = savedArgs[0], arg2 = 2 <= savedArgs.length ? slice.call(savedArgs, 1) : [];
          this.ma.apply(this, [cmd].concat(slice.call(arg2)));
        }
      }
    }
    return window.ma = this.ma;
  };

  return Main;

})();

annotate(Main, new Inject(CommandExecutor, WindowProvider, HostNameBuilder, require('./AdCommand'), require('./ConvertCommand')));

annotate(Main, new ClassProvider);

module.exports = Main;
