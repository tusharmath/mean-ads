// Generated by CoffeeScript 1.9.1
var AdCommand, ClassProvider, Inject, annotate, querystring, ref;

querystring = require('querystring');

ref = require('di'), annotate = ref.annotate, Inject = ref.Inject, ClassProvider = ref.ClassProvider;

AdCommand = (function() {
  function AdCommand(http, host, exec, windowP) {
    this.http = http;
    this.host = host;
    this.exec = exec;
    this.windowP = windowP;
    this.exec.register(this);
  }

  AdCommand.prototype._baseUrl = '/api/v1/dispatch';

  AdCommand.prototype.alias = 'ad';

  AdCommand.prototype._getUrl = function(p, k, l) {
    var req;
    req = {};
    if (k) {
      req.k = k;
    }
    req.l = l || 1;
    return this.host.getHostWithProtocol() + this._baseUrl + ("/" + p + "?") + querystring.stringify(req);
  };

  AdCommand.prototype.execute = function(program, elements, keywords) {
    var HTMLCollection, url;
    if (!program || !elements) {
      return null;
    }
    HTMLCollection = this.windowP.window().HTMLCollection;
    if (elements instanceof Array === false && elements instanceof HTMLCollection === false) {
      elements = [elements];
    }
    url = this._getUrl(program, keywords, elements.length);
    return this.http.get(url, {
      withCredentials: true
    }, function(body, status, obj) {
      var i, j, len, markup, markupList, results;
      markupList = JSON.parse(body);
      results = [];
      for (i = j = 0, len = markupList.length; j < len; i = ++j) {
        markup = markupList[i];
        results.push(elements[i].innerHTML = markup);
      }
      return results;
    });
  };

  return AdCommand;

})();

annotate(AdCommand, new ClassProvider);

annotate(AdCommand, new Inject(require('../sdk/HttpProvider'), require('./HostNameBuilder'), require('./CommandExecutor'), require('../providers/WindowProvider')));

module.exports = AdCommand;
