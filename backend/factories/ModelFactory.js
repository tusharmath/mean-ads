// Generated by CoffeeScript 1.9.1
var DbConnection, Inject, MeanError, ModelFactory, ModelNames, MongooseProvider, Q, RequireProvider, _, glob,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

MeanError = require('../config/error-codes').MeanError;

DbConnection = require('../connections/DbConnection');

MongooseProvider = require('../providers/MongooseProvider');

RequireProvider = require('../providers/RequireProvider');

Inject = require('di').Inject;

glob = require('glob');

_ = require('lodash');

Q = require('q');

ModelNames = ['Campaign', 'Dispatch', 'Program', 'Style', 'Subscription'];

ModelFactory = (function() {
  function ModelFactory(db, mongooseP, requireProvider) {
    this.db = db;
    this.mongooseP = mongooseP;
    this.requireProvider = requireProvider;
    this._reduce = bind(this._reduce, this);
    this._create();
  }

  ModelFactory.prototype._reduce = function(models, resourceName) {
    var schema;
    if (!resourceName) {
      throw new MeanError('resourceName is required');
    }
    schema = this.requireProvider.require("../schemas/" + resourceName + "Schema");
    bragi.log('resource', resourceName);
    models[resourceName] = this.db.conn.model(resourceName, schema(this.mongooseP.mongoose));
    return models;
  };

  ModelFactory.prototype._create = function() {
    if (this.Models) {
      return this.Models;
    }
    return this.Models = _.reduce(ModelNames, this._reduce, this);
  };

  return ModelFactory;

})();

ModelFactory.annotations = [new Inject(DbConnection, MongooseProvider, RequireProvider)];

module.exports = ModelFactory;
