// Generated by CoffeeScript 1.9.1
var DispatchFactory, Inject, Q, _, annotate, config, less, ref;

Q = require('q');

less = require('less');

_ = require('lodash');

ref = require('di'), annotate = ref.annotate, Inject = ref.Inject;

config = require('../config/config');

DispatchFactory = (function() {
  function DispatchFactory(models, dot, htmlMinify, date, subPopulator) {
    this.models = models;
    this.dot = dot;
    this.htmlMinify = htmlMinify;
    this.date = date;
    this.subPopulator = subPopulator;
  }

  DispatchFactory.prototype._elPrefix = function(key) {
    return "ae-" + key;
  };

  DispatchFactory.prototype._getModel = function(name) {
    return this.models[name];
  };

  DispatchFactory.prototype._attachRedirectURI = function(subscription) {
    return _.each(subscription.data, function(value, field) {
      if (field.match(/_uri/)) {
        return subscription.data[field] = "//" + config.appHost + "/api/v1/subscription/" + subscription._id + "/ack?uri=" + value;
      }
    });
  };

  DispatchFactory.prototype._interpolateMarkup = function(subscription) {
    var _id, _markup, _wrappedHtml, css, data, el, html, lessCss, ref1;
    this._attachRedirectURI(subscription);
    data = subscription.data;
    ref1 = subscription.campaign.program.style, html = ref1.html, css = ref1.css, _id = ref1._id;
    el = this._elPrefix(_id);
    _wrappedHtml = "<div class=\"" + el + "\">" + html + "</div>";
    _markup = this.dot.template(_wrappedHtml)(data);
    lessCss = "." + el + " { " + (css || '') + " }";
    return less.render(lessCss).then((function(_this) {
      return function(renderedCss) {
        var out;
        css = renderedCss.css;
        if (!css || css === '') {
          out = _markup;
        } else {
          out = "<style>" + css + "</style>" + _markup;
        }
        return _this.htmlMinify.minify(out);
      };
    })(this));
  };

  DispatchFactory.prototype._createDispatchable = function(subscription) {
    var Dispatch, campaign, program;
    campaign = subscription.campaign;
    program = campaign.program;
    if (campaign.isEnabled === false || subscription.hasCredits === false) {
      return Q(null);
    }
    Dispatch = this._getModel('Dispatch');
    return this._interpolateMarkup(subscription).then(function(markup) {
      return new Dispatch({
        markup: markup,
        subscription: subscription._id,
        startDate: subscription.startDate,
        program: program._id,
        allowedOrigins: program.allowedOrigins,
        keywords: subscription.keywords
      }).saveQ();
    });
  };

  DispatchFactory.prototype.removeForSubscriptionId = function(subscriptionId) {
    return this._getModel('Dispatch').find({
      subscription: subscriptionId
    }).remove().execQ();
  };

  DispatchFactory.prototype.createForSubscriptionId = function(subscriptionId) {
    return this.subPopulator.populateSubscription(subscriptionId).then((function(_this) {
      return function(subscription) {
        return _this._createDispatchable(subscription);
      };
    })(this));
  };

  DispatchFactory.prototype.updateForSubscriptionId = function(subscriptionId) {
    return this.removeForSubscriptionId(subscriptionId).then((function(_this) {
      return function() {
        return _this.createForSubscriptionId(subscriptionId);
      };
    })(this));
  };

  return DispatchFactory;

})();

annotate(DispatchFactory, new Inject(require('./ModelFactory'), require('../providers/DotProvider'), require('../providers/HtmlMinifierProvider'), require('../providers/DateProvider'), require('../modules/SubscriptionPopulator')));

module.exports = DispatchFactory;
