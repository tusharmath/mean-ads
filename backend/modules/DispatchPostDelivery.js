// Generated by CoffeeScript 1.9.1
var DateProvder, DispatchFactory, DispatchPostDelivery, DotProvider, Inject, ModelFactory, Q, SubscriptionPopulator, _, annotate, less, ref;

ModelFactory = require('../factories/ModelFactory');

DispatchFactory = require('../factories/DispatchFactory');

SubscriptionPopulator = require('./SubscriptionPopulator');

Q = require('q');

DotProvider = require('../providers/DotProvider');

DateProvder = require('../providers/DateProvider');

less = require('less');

_ = require('lodash');

ref = require('di'), annotate = ref.annotate, Inject = ref.Inject;

DispatchPostDelivery = (function() {
  function DispatchPostDelivery(models, dot, date, subPopulator, dispatchFac) {
    this.models = models;
    this.dot = dot;
    this.date = date;
    this.subPopulator = subPopulator;
    this.dispatchFac = dispatchFac;
  }

  DispatchPostDelivery.prototype._getModel = function(name) {
    return this.models[name];
  };

  DispatchPostDelivery.prototype._getImpressionCost = function(subscriptionP, keywords) {
    var defaultCost, keywordPricing;
    defaultCost = subscriptionP.campaign.defaultCost / 1000;
    keywordPricing = _.filter(subscriptionP.campaign.keywordPricing, function(i) {
      return _.any(keywords, function(j) {
        return j === i.keyName;
      });
    });
    if (keywordPricing.length === 0) {
      return defaultCost;
    } else {
      return _.max(keywordPricing, function(i) {
        return i.keyPrice;
      }).keyPrice / 1000;
    }
  };

  DispatchPostDelivery.prototype._increaseUsedCredits = function(subscriptionP, cost) {
    var delta;
    if (cost == null) {
      cost = 0;
    }
    delta = {
      usedCredits: subscriptionP.usedCredits + cost
    };
    delta.impressions = subscriptionP.impressions + 1;
    return this._getModel('Subscription').findByIdAndUpdate(subscriptionP._id, delta).execQ();
  };

  DispatchPostDelivery.prototype._updateDeliveryDate = function(dispatch) {
    return this._getModel('Dispatch').findByIdAndUpdate(dispatch._id, {
      lastDeliveredOn: this.date.now()
    }).execQ();
  };

  DispatchPostDelivery.prototype.delivered = function(dispatch, keywords) {
    return this.subPopulator.populateSubscription(dispatch.subscription).then((function(_this) {
      return function(subscriptionP) {
        var cost;
        if (subscriptionP === null) {
          return _this.dispatchFac.removeForSubscriptionId(dispatch.subscription);
        } else {
          cost = _this._getImpressionCost(subscriptionP, keywords);
          return _this._increaseUsedCredits(subscriptionP, cost).then(function(subscriptionP) {
            if (subscriptionP.hasCredits) {
              return _this._updateDeliveryDate(dispatch);
            } else {
              return _this.dispatchFac.removeForSubscriptionId(subscriptionP._id);
            }
          });
        }
      };
    })(this));
  };

  return DispatchPostDelivery;

})();

annotate(DispatchPostDelivery, new Inject(ModelFactory, DotProvider, DateProvder, SubscriptionPopulator, DispatchFactory));

module.exports = DispatchPostDelivery;
