// Generated by CoffeeScript 1.9.1
var DateProvder, DispatchFactory, DispatchPostDelivery, Dispatcher, Inject, ModelFactory, Q, _, annotate, ref;

ModelFactory = require('../factories/ModelFactory');

DispatchPostDelivery = require('./DispatchPostDelivery');

DispatchFactory = require('../factories/DispatchFactory');

DateProvder = require('../providers/DateProvider');

Q = require('q');

_ = require('lodash');

ref = require('di'), annotate = ref.annotate, Inject = ref.Inject;

Dispatcher = (function() {
  function Dispatcher(models, date, dispatchDelivery, dispatchFac) {
    this.models = models;
    this.date = date;
    this.dispatchDelivery = dispatchDelivery;
    this.dispatchFac = dispatchFac;
  }

  Dispatcher.prototype._getModel = function(name) {
    return this.models[name];
  };

  Dispatcher.prototype._defaultOptions = function(options) {
    var _options;
    _options = {
      keywords: [],
      limit: 1
    };
    return _.assign(_options, options);
  };

  Dispatcher.prototype.getAllowedOrigins = function(dispatchList) {
    var dispatch;
    dispatch = _.find(dispatchList, function(d) {
      return d.allowedOrigins.length > 0;
    });
    if (dispatch) {
      return dispatch.allowedOrigins;
    } else {
      return [];
    }
  };

  Dispatcher.prototype.next = function(programId, options) {
    var dispatchQuery, keywords, limit, ref1;
    ref1 = this._defaultOptions(options), keywords = ref1.keywords, limit = ref1.limit;
    dispatchQuery = this._getModel('Dispatch').where({
      program: programId
    }).where({
      startDate: {
        $lte: this.date.now()
      }
    });
    if (keywords.length) {
      dispatchQuery = dispatchQuery.where('keywords')["in"](keywords);
    }
    return dispatchQuery.sort({
      lastDeliveredOn: 'asc'
    }).find().limit(limit).execQ().then((function(_this) {
      return function(dispatchList) {
        _.each(dispatchList, function(d) {
          return _this.dispatchDelivery.delivered(d, keywords).done();
        });
        return dispatchList;
      };
    })(this));
  };

  Dispatcher.prototype.subscriptionCreated = function(subscriptionId) {
    return this.dispatchFac.createForSubscriptionId(subscriptionId);
  };

  Dispatcher.prototype.subscriptionUpdated = function(subscriptionId) {
    return this.dispatchFac.updateForSubscriptionId(subscriptionId);
  };

  Dispatcher.prototype._resourceUpdated = function(resource, match, id) {
    var filter;
    match = match.toLowerCase();
    filter = {};
    filter[match] = id;
    return this._getModel(resource).where(filter).find().execQ().then((function(_this) {
      return function(items) {
        return Q.all(_.map(items, function(i) {
          return _this[(resource.toLowerCase()) + "Updated"](i._id);
        }));
      };
    })(this));
  };

  Dispatcher.prototype.campaignUpdated = function(id) {
    return this._resourceUpdated('Subscription', 'Campaign', id);
  };

  Dispatcher.prototype.programUpdated = function(id) {
    return this._resourceUpdated('Campaign', 'Program', id);
  };

  Dispatcher.prototype.styleUpdated = function(id) {
    return this._resourceUpdated('Program', 'Style', id);
  };

  return Dispatcher;

})();

annotate(Dispatcher, new Inject(ModelFactory, DateProvder, DispatchPostDelivery, DispatchFactory));

module.exports = Dispatcher;
