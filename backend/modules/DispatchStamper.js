// Generated by CoffeeScript 1.9.1
var DateProvider, DispatchStamper, Inject, MeanError, _, annotate, config, ref;

config = require('../config/config');

DateProvider = require('../providers/DateProvider');

_ = require('lodash');

MeanError = require('../config/error-codes').MeanError;

ref = require('di'), Inject = ref.Inject, annotate = ref.annotate;

DispatchStamper = (function() {
  function DispatchStamper(date) {
    this.date = date;
  }

  DispatchStamper.prototype._reduce = function(m, i) {
    if (m !== '') {
      m += ',';
    }
    return m += i.subscription + ":" + (i.timestamp.getTime());
  };

  DispatchStamper.prototype._getMaxDispatchCount = function() {
    return config.maxDispatchStampCount;
  };

  DispatchStamper.prototype._getConversionMaxAge = function() {
    return config.conversionMaxAge;
  };

  DispatchStamper.prototype._removeOldStamps = function(stamps) {
    var maxCount;
    maxCount = this._getMaxDispatchCount();
    return _.sortBy(stamps, function(v) {
      return v.timestamp;
    }).slice(_.max([stamps.length - maxCount, 0]));
  };

  DispatchStamper.prototype._updateOrAddNewStamp = function(stamps, newStamp) {
    var oldStamp;
    oldStamp = _.find(stamps, function(v) {
      return v.subscription.toString() === newStamp.subscription.toString();
    });
    if (!oldStamp) {
      stamps.push(newStamp);
    } else {
      oldStamp.timestamp = newStamp.timestamp;
    }
    return stamps;
  };

  DispatchStamper.prototype.appendStamp = function(stampStr, dispatch) {
    var stamps, stampsOldRemoved, stampsUpdatedOrAdded, subscription, timestamp;
    stamps = this.parseStamp(stampStr);
    subscription = dispatch.subscription;
    timestamp = this.date.now();
    stampsUpdatedOrAdded = this._updateOrAddNewStamp(stamps, {
      subscription: subscription,
      timestamp: timestamp
    });
    stampsOldRemoved = this._removeOldStamps(stampsUpdatedOrAdded);
    return _.reduce(stampsOldRemoved, this._reduce, '');
  };

  DispatchStamper.prototype.parseStamp = function(stampStr) {
    if (!stampStr) {
      return [];
    }
    return _.map(stampStr.split(','), function(i) {
      var ref1, subscription, timestamp;
      ref1 = i.split(':'), subscription = ref1[0], timestamp = ref1[1];
      timestamp = new Date(parseInt(timestamp, 10));
      if (!subscription || timestamp.toString() === 'Invalid Date') {
        throw new MeanError('Can not parse dispatch timestamp.');
      }
      return {
        subscription: subscription,
        timestamp: timestamp
      };
    });
  };

  DispatchStamper.prototype.isConvertableSubscription = function(stampStr, subscriptionId) {
    return _.any(this.parseStamp(stampStr), (function(_this) {
      return function(v) {
        return v.subscription === subscriptionId && _this.date.now().getTime() - v.timestamp < _this._getConversionMaxAge();
      };
    })(this));
  };

  return DispatchStamper;

})();

annotate(DispatchStamper, new Inject(DateProvider));

module.exports = DispatchStamper;
