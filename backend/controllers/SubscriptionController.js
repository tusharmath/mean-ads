// Generated by CoffeeScript 1.9.1
var ErrorPool, Inject, Q, SubscriptionController, _, annotate, config, ref,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

config = require('../config/config');

Q = require('q');

_ = require('lodash');

ErrorPool = require('../config/error-codes').ErrorPool;

ref = require('di'), annotate = ref.annotate, Inject = ref.Inject;

SubscriptionController = (function() {
  function SubscriptionController(dispatch, actions, mailer) {
    this.dispatch = dispatch;
    this.actions = actions;
    this.mailer = mailer;
    this.$clickAck = bind(this.$clickAck, this);
    this.$convert = bind(this.$convert, this);
    this.$email = bind(this.$email, this);
    this.postUpdateHook = bind(this.postUpdateHook, this);
    this.postCreateHook = bind(this.postCreateHook, this);
    this._populate = {
      path: 'campaign',
      select: 'name'
    };
    this.actions._filterKeys = ['campaign'];
    this.actions.resourceName = 'Subscription';
    this.actions.actionMap.$credits = [
      'get', function(str) {
        return "/core/" + str + "s/credits";
      }
    ];
    this.actions.actionMap.$email = [
      'post', function(str) {
        return "/core/" + str + "/:id/email";
      }
    ];
    this.actions.actionMap.$convert = [
      'get', function(str) {
        return "/" + str + "/:id/convert.gif";
      }
    ];
    this.actions.actionMap.$clickAck = [
      'get', function(str) {
        return "/" + str + "/:id/ack";
      }
    ];
    this.actions.postUpdateHook = this.postUpdateHook;
    this.actions.postCreateHook = this.postCreateHook;
    this.actions.$credits = this.$credits;
    this.actions.$convert = this.$convert;
    this.actions.$email = this.$email;
    this.actions.$clickAck = this.$clickAck;
  }

  SubscriptionController.prototype.postCreateHook = function(subscription) {
    return this.dispatch.subscriptionCreated(subscription._id).then(function() {
      return subscription;
    });
  };

  SubscriptionController.prototype.postUpdateHook = function(subscription) {
    return this.dispatch.subscriptionUpdated(subscription._id).then(function() {
      return subscription;
    });
  };

  SubscriptionController.prototype._emailQ = function(subscription, toEmail) {
    var mail;
    mail = {
      from: config.mailgun.noReplyEmail,
      to: toEmail,
      subject: "Performance report of your subscription " + subscription._id,
      template: 'subscription-report',
      locals: {
        subscription: subscription
      }
    };
    return this.mailer.sendQ(mail);
  };

  SubscriptionController.prototype.$credits = function(req) {
    return this.getModel().find({
      owner: req.user.sub
    }).execQ().then(function(data) {
      var creditDistribution, creditUsage;
      creditUsage = _.reduce(data, function(sum, subscription) {
        return sum += subscription.usedCredits;
      }, 0);
      creditDistribution = _.reduce(data, function(sum, subscription) {
        return sum += subscription.totalCredits;
      }, 0);
      return {
        creditDistribution: creditDistribution,
        creditUsage: creditUsage
      };
    });
  };

  SubscriptionController.prototype.$email = function(req, res) {
    return this.actions.getModel().findByIdQ(req.params.id).then((function(_this) {
      return function(subscription) {
        return Q.all(_.map(subscription.emailAccess, function(email) {
          return _this._emailQ(subscription, email);
        }));
      };
    })(this));
  };

  SubscriptionController.prototype.$convert = function(req, res) {
    this._convertQ(req).done();
    res.set('Content-Type', config.transparentGif.contentType);
    return Q(config.transparentGif.image);
  };

  SubscriptionController.prototype._convertQ = function(req) {
    var Subscription;
    Subscription = this.actions.getModel();
    return Subscription.findByIdQ(req.params.id).then(function(subscription) {
      return Subscription.findByIdAndUpdate(subscription._id, {
        conversions: subscription.conversions + 1
      }).execQ();
    });
  };

  SubscriptionController.prototype._clickAckQ = function(id) {
    var model;
    return model = this.actions.getModel().findByIdQ(id).then(function(subscription) {
      if (!subscription) {
        return;
      }
      subscription.clicks++;
      return subscription.saveQ();
    });
  };

  SubscriptionController.prototype.$clickAck = function(req, res) {
    if (!req.query.uri) {
      throw ErrorPool.INVALID_PARAMETERS;
    }
    this._clickAckQ(req.params.id).done();
    res.set('Location', req.query.uri);
    res.status(302);
    return Q(null);
  };

  return SubscriptionController;

})();

annotate(SubscriptionController, new Inject(require('../modules/Dispatcher'), require('./BaseController'), require('../modules/Mailer')));

module.exports = SubscriptionController;
