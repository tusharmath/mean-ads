// Generated by CoffeeScript 1.9.1
var DispatchController, ErrorPool, Inject, _, annotate, ref,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ErrorPool = require('../config/error-codes').ErrorPool;

ref = require('di'), annotate = ref.annotate, Inject = ref.Inject;

_ = require('lodash');

DispatchController = (function() {
  function DispatchController(dispatch) {
    this.dispatch = dispatch;
    this.$index = bind(this.$index, this);
    this.actions = {
      actionMap: {
        $index: [
          'get', function() {
            return '/dispatch/:program';
          }
        ]
      }
    };
    this.actions.$index = this.$index;
  }

  DispatchController.prototype.cookieName = '_sub';

  DispatchController.prototype._dispatcherOptions = function(query) {
    var defaultOptions, k, l, ref1;
    defaultOptions = {
      k: [],
      l: 1
    };
    ref1 = _.assign(defaultOptions, query), k = ref1.k, l = ref1.l;
    if (!_.isArray(k)) {
      k = [k];
    }
    return {
      keywords: k,
      limit: l
    };
  };

  DispatchController.prototype.$index = function(req, res) {
    var origin, program;
    origin = req.headers.origin;
    program = req.params.program;
    return this.dispatch.next(program, this._dispatcherOptions(req.query)).then((function(_this) {
      return function(dispatchList) {
        var allowedOrigins;
        if (dispatchList.length === 0) {
          return [];
        }
        allowedOrigins = _this.dispatch.getAllowedOrigins(dispatchList);
        if (_.contains(allowedOrigins, origin)) {
          res.set('Access-Control-Allow-Origin', origin);
          res.set('Access-Control-Allow-Credentials', true);
        }
        return _.pluck(dispatchList, 'markup');
      };
    })(this));
  };

  return DispatchController;

})();

annotate(DispatchController, new Inject(require('../modules/Dispatcher')));

module.exports = DispatchController;
