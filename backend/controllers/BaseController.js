// Generated by CoffeeScript 1.9.1
var BaseController, ErrorPool, Inject, MeanError, ModelFactory, Q, TransientScope, _, ref, ref1;

Q = require('q');

ModelFactory = require('../factories/ModelFactory');

ref = require('di'), TransientScope = ref.TransientScope, Inject = ref.Inject;

_ = require('lodash');

ref1 = require('../config/error-codes'), ErrorPool = ref1.ErrorPool, MeanError = ref1.MeanError;

BaseController = (function() {
  function BaseController(models) {
    this.models = models;
    this._filterKeys = [];
    this.resourceName = null;
    this.hasListOwner = true;
  }

  BaseController.prototype.actionMap = {
    '$create': [
      'post', function(str) {
        return "/core/" + str;
      }
    ],
    '$list': [
      'get', function(str) {
        return "/core/" + str + "s";
      }
    ],
    '$count': [
      'get', function(str) {
        return "/core/" + str + "s/count";
      }
    ],
    '$one': [
      'get', function(str) {
        return "/core/" + str + "/:id";
      }
    ],
    '$update': [
      'patch', function(str) {
        return "/core/" + str + "/:id";
      }
    ],
    '$remove': [
      'delete', function(str) {
        return "/core/" + str + "/:id";
      }
    ]
  };

  BaseController.prototype.getModel = function() {
    var model;
    model = this.models[this.resourceName];
    if (model) {
      return model;
    }
    throw new MeanError(this.resourceName + " was not found in Models");
  };

  BaseController.prototype.postCreateHook = function(i) {
    return i;
  };

  BaseController.prototype.$create = function(req) {
    var Model, obj;
    req.body.owner = req.user.sub;
    Model = this.getModel();
    obj = new Model(req.body);
    return obj.saveQ().then((function(_this) {
      return function(createResponse) {
        return _this.postCreateHook(createResponse);
      };
    })(this));
  };

  BaseController.prototype.postUpdateHook = function(i) {
    return i;
  };

  BaseController.prototype.$update = function(req) {
    return this.$one(req).then((function(_this) {
      return function() {
        delete req.body._id;
        return _this.getModel().findByIdAndUpdate(req.params.id, req.body).execQ();
      };
    })(this)).then((function(_this) {
      return function(updatedData) {
        return _this.postUpdateHook(updatedData);
      };
    })(this));
  };

  BaseController.prototype.$count = function(req) {
    var filter;
    filter = _.pick(req.query, this._filterKeys);
    filter.owner = req.user.sub;
    return this.getModel().count(filter).execQ().then(function(count) {
      return {
        count: count
      };
    });
  };

  BaseController.prototype.$list = function(req) {
    var _populate, filter, ref2;
    _populate = ((ref2 = req.query) != null ? ref2.populate : void 0) || '';
    filter = _.pick(req.query, this._filterKeys);
    if (this.hasListOwner) {
      filter.owner = req.user.sub;
    }
    return this.getModel().find(filter).populate(_populate).execQ();
  };

  BaseController.prototype.$remove = function(req) {
    return this.$one(req).then((function(_this) {
      return function() {
        return _this.getModel().findByIdAndRemove(req.params.id).execQ();
      };
    })(this));
  };

  BaseController.prototype.$one = function(req) {
    return this.getModel().findOne({
      _id: req.params.id
    }).execQ().then(function(doc) {
      if (doc === null) {
        throw ErrorPool.NOTFOUND_DOCUMENT;
      }
      if (doc.owner !== req.user.sub) {
        throw ErrorPool.FORBIDDEN_DOCUMENT;
      }
      return doc;
    });
  };

  return BaseController;

})();

BaseController.annotations = [new TransientScope(), new Inject(ModelFactory)];

module.exports = BaseController;
