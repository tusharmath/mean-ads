// Generated by CoffeeScript 1.9.1
var Injector, MongooseProviderMock, Q, errors;

errors = require('../backend/config/error-codes');

MongooseProviderMock = require('./mocks/MongooseProviderMock');

Q = require('q');

Injector = require('di').Injector;

describe('DispatchController:', function() {
  beforeEach(function() {
    var injector;
    this.req = {
      query: {},
      params: {
        program: Date.now()
      },
      signedCookies: {
        _sub: 'aa:111'
      },
      headers: {
        origin: 'alpha'
      }
    };
    this.res = {
      set: sinon.spy(),
      cookie: sinon.spy()
    };
    injector = new Injector([MongooseProviderMock]);
    this.mod = injector.getModule('controllers.DispatchController', {
      mock: false
    });
    this.dispatcher = injector.getModule('modules.Dispatcher');
    this.dispatcher.next.resolves([
      {
        markup: 'sample-markup'
      }
    ]);
    this.dispatcher.getAllowedOrigins.returns(['http://a.com', 'http://b.com']);
    return this.mongo = injector.getModule('providers.MongooseProvider');
  });
  afterEach(function() {
    return this.mongo.__reset();
  });
  return describe("$index()", function() {
    it("calls resolve with dispatcher.next", function() {
      return this.mod.actions.$index(this.req, this.res).should.eventually.deep.equal(['sample-markup']);
    });
    it("calls next", function() {
      this.req.query = {
        k: ['a', 'b'],
        l: 100
      };
      return this.mod.actions.$index(this.req, this.res).then((function(_this) {
        return function() {
          return _this.dispatcher.next.calledWith(_this.req.params.program, {
            keywords: ['a', 'b'],
            limit: 100
          });
        };
      })(this)).should.eventually.be.ok;
    });
    it("sends [k] if not an array", function() {
      this.req.query = {
        k: 'xyz'
      };
      return this.mod.actions.$index(this.req, this.res).then((function(_this) {
        return function() {
          _this.dispatcher.next.calledWithExactly(_this.req.params.program, {
            limit: 1,
            keywords: ['xyz']
          }).should.be.ok;
          return _this.dispatcher.next.calledOn(_this.dispatcher).should.be.ok;
        };
      })(this));
    });
    it("set Access-Control-Allow-Origin headers", function() {
      this.req.headers = {
        origin: 'http://a.com'
      };
      return this.mod.actions.$index(this.req, this.res).then((function(_this) {
        return function() {
          return _this.res.set.calledWith('Access-Control-Allow-Origin', 'http://a.com');
        };
      })(this)).should.eventually.be.ok;
    });
    it("set Access-Control-Allow-Credentials headers", function() {
      this.req.headers = {
        origin: 'http://a.com'
      };
      return this.mod.actions.$index(this.req, this.res).then((function(_this) {
        return function() {
          return _this.res.set.calledWith('Access-Control-Allow-Credentials', true);
        };
      })(this)).should.eventually.be.ok;
    });
    it("NOT set cross origin headers", function() {
      return this.mod.actions.$index(this.req, this.res).then((function(_this) {
        return function() {
          return _this.res.set.called.should.not.be.ok;
        };
      })(this));
    });
    return it("returns empty array", function() {
      this.dispatcher.next.resolves([]);
      return this.mod.actions.$index(this.req, this.res).should.eventually.deep.equal([]);
    });
  });
});
