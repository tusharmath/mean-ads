// Generated by CoffeeScript 1.9.1
var BaseController, DispatchStamper, Dispatcher, ErrorPool, Injector, Mailer, MailgunProviderMock, ModelFactory, MongooseProvider, MongooseProviderMock, SubscriptionController, config, mockDataSetup;

BaseController = require('../backend/controllers/BaseController');

SubscriptionController = require('../backend/controllers/SubscriptionController');

ModelFactory = require('../backend/factories/ModelFactory');

MongooseProviderMock = require('./mocks/MongooseProviderMock');

MongooseProvider = require('../backend/providers/MongooseProvider');

Dispatcher = require('../backend/modules/Dispatcher');

Mailer = require('../backend/modules/Mailer');

MailgunProviderMock = require('./mocks/MailgunProviderMock');

DispatchStamper = require('../backend/modules/DispatchStamper');

config = require('../backend/config/config');

ErrorPool = require('../backend/config/error-codes').ErrorPool;

mockDataSetup = require('./mocks/MockData').mockDataSetup;

Injector = require('di').Injector;

describe('SubscriptionController:', function() {
  beforeEach(function() {
    this.req = {
      user: {
        sub: 9000
      },
      params: {
        id: 9010
      },
      signedCookies: {},
      query: {
        uri: 'tusharm.com'
      }
    };
    this.res = {
      send: sinon.spy(),
      set: sinon.spy(),
      status: sinon.spy()
    };
    this.injector = new Injector([MongooseProviderMock, MailgunProviderMock]);
    this.mockDataSetup = mockDataSetup;
    this.Models = this.injector.getModule('factories.ModelFactory', {
      mock: false
    });
    this.dispatcher = this.injector.getModule('modules.Dispatcher');
    this.stamper = this.injector.getModule('modules.DispatchStamper');
    this.stamper.isConvertableSubscription.returns(true);
    this.mailer = this.injector.getModule('modules.Mailer');
    this.mailer.sendQ.resolves('mail-sent');
    return this.mod = this.injector.getModule('controllers.SubscriptionController', {
      mock: false
    });
  });
  afterEach(function() {
    return this.Models.mongooseP.__reset();
  });
  it("actions should exist", function() {
    return this.mod.actions.should.be.an.instanceOf(BaseController);
  });
  describe("actionMap", function() {
    it("has convertActionMap", function() {
      var method, ref, route;
      ref = this.mod.actions.actionMap.$convert, method = ref[0], route = ref[1];
      method.should.equal('get');
      return route('subscription').should.equal('/subscription/:id/convert.gif');
    });
    return it("should have email route", function() {
      var action, ref, route;
      ref = this.mod.actions.actionMap.$email, action = ref[0], route = ref[1];
      action.should.equal('post');
      return route('subscriptions').should.equal('/core/subscriptions/:id/email');
    });
  });
  describe("$credits()", function() {
    beforeEach(function() {
      return this.mockDataSetup();
    });
    it("be a function", function() {
      return this.mod.actions.$credits.should.be.a.Function;
    });
    it("returns creditDistribution", function() {
      return this.mod.actions.$credits(this.req).should.eventually.have.property('creditDistribution').equal(7000);
    });
    return it("returns credtUsage", function() {
      return this.mod.actions.$credits(this.req).should.eventually.have.property('creditUsage').equal(360);
    });
  });
  describe("postCreateHooks()", function() {
    beforeEach(function() {
      return this.dispatcher.subscriptionCreated.resolves(null);
    });
    return it("calls subscriptionCreated", function() {
      return this.mod.postCreateHook({
        _id: 1000
      }).then((function(_this) {
        return function() {
          return _this.dispatcher.subscriptionCreated.calledWith(1000).should.be.ok;
        };
      })(this));
    });
  });
  describe("postUpdateHooks()", function() {
    beforeEach(function() {
      return this.dispatcher.subscriptionUpdated.resolves(null);
    });
    return it("calls subscriptionUpdated", function() {
      return this.mod.postUpdateHook({
        _id: 1000
      }).then((function(_this) {
        return function() {
          return _this.dispatcher.subscriptionUpdated.calledWith(1000).should.be.ok;
        };
      })(this));
    });
  });
  describe("_convertQ()", function() {
    beforeEach(function() {
      return this.mockDataSetup().then((function(_this) {
        return function() {
          _this.req.params = {
            id: _this.subscription._id
          };
          _this.req.headers = {
            origin: 'http://www.site.com'
          };
          return _this.Models.Subscription.findByIdAndUpdate(_this.subscription._id, {
            conversions: 220
          }).execQ();
        };
      })(this));
    });
    it("be a function", function() {
      return this.mod._convertQ.should.be.a.Function;
    });
    return it("updates conversion if is in signedCookies._sub", function() {
      return this.mod._convertQ(this.req, this.res).then((function(_this) {
        return function() {
          return _this.Models.Subscription.findByIdQ(_this.subscription._id);
        };
      })(this)).should.eventually.have.property('conversions').equals(221);
    });
  });
  describe("_emailQ()", function() {
    beforeEach(function() {
      return this.mockDataSetup();
    });
    it("sends mail with from", function() {
      return this.mod._emailQ(this.subscription, 'vendy@pendy.com').then((function(_this) {
        return function() {
          return _this.mailer.sendQ.getCall(0).args[0];
        };
      })(this)).should.eventually.have.property('from').equal('noreply@meanads.com');
    });
    it("sends mail with to", function() {
      return this.mod._emailQ(this.subscription, 'vendy@pendy.com').then((function(_this) {
        return function() {
          return _this.mailer.sendQ.getCall(0).args[0];
        };
      })(this)).should.eventually.have.property('to').equal('vendy@pendy.com');
    });
    it("sends mail with subject", function() {
      return this.mod._emailQ(this.subscription, 'vendy@pendy.com').then((function(_this) {
        return function() {
          return _this.mailer.sendQ.getCall(0).args[0];
        };
      })(this)).should.eventually.have.property('subject').equal("Performance report of your subscription " + this.subscription._id);
    });
    it("sends mail with template", function() {
      return this.mod._emailQ(this.subscription, 'vendy@pendy.com').then((function(_this) {
        return function() {
          return _this.mailer.sendQ.getCall(0).args[0];
        };
      })(this)).should.eventually.have.property('template').equal("subscription-report");
    });
    it("sends mail with locals", function() {
      return this.mod._emailQ(this.subscription, 'vendy@pendy.com').then((function(_this) {
        return function() {
          return _this.mailer.sendQ.getCall(0).args[0];
        };
      })(this)).should.eventually.have.property('locals').deep.equal({
        subscription: this.subscription
      });
    });
    return it("resolves with mail-sent", function() {
      return this.mod._emailQ(this.subscription, 'vendy@pendy.com').should.eventually.equal('mail-sent');
    });
  });
  describe("$email()", function() {
    beforeEach(function() {
      sinon.spy(this.mod, '_emailQ');
      return this.mockDataSetup();
    });
    it("be a function", function() {
      return this.mod.actions.$email.should.be.a.Function;
    });
    it("calls _emailQ with subscription", function() {
      this.req.params.id = this.subscription._id;
      return this.mod.actions.$email(this.req).then((function(_this) {
        return function() {
          return _this.mod._emailQ.getCall(0).args[0]._id;
        };
      })(this)).should.eventually.deep.equal(this.subscription._id);
    });
    return it("calls _emailQ with emailTo", function() {
      this.req.params.id = this.subscription._id;
      return this.mod.actions.$email(this.req).then((function(_this) {
        return function() {
          return _this.mod._emailQ.getCall(0).args[1];
        };
      })(this)).should.eventually.deep.equal('a@a.com');
    });
  });
  describe("$convert()", function() {
    beforeEach(function() {
      this.fakePromise = {
        done: sinon.spy()
      };
      return sinon.stub(this.mod, '_convertQ').returns(this.fakePromise);
    });
    it("be a function", function() {
      return this.mod.actions.$convert.should.be.a.Function;
    });
    it("sends transparent image", function() {
      return this.mod.actions.$convert(this.req, this.res).should.eventually.deep.equal(config.transparentGif.image);
    });
    it("sets content-type", function() {
      return this.mod.actions.$convert(this.req, this.res).then((function(_this) {
        return function() {
          return _this.res.set.calledWith('Content-Type', 'image/gif');
        };
      })(this)).should.eventually.be.ok;
    });
    it("calls the _convertQ", function() {
      return this.mod.actions.$convert(this.req, this.res).then((function(_this) {
        return function() {
          return _this.mod._convertQ.calledWith(_this.req);
        };
      })(this)).should.eventually.be.ok;
    });
    return it("calls the _convertQ.done()", function() {
      return this.mod.actions.$convert(this.req, this.res).then((function(_this) {
        return function() {
          return _this.fakePromise.done.called;
        };
      })(this)).should.eventually.be.ok;
    });
  });
  describe("_clickAckQ()", function() {
    beforeEach(function() {
      return this.mockDataSetup().then((function(_this) {
        return function() {
          _this.req.params = {
            id: _this.subscription._id
          };
          return _this.Models.Subscription.findByIdAndUpdate(_this.subscription._id, {
            clicks: 220
          }).execQ();
        };
      })(this));
    });
    it("be a function", function() {
      return this.mod._clickAckQ.should.be.a.Function;
    });
    return it("updates clicks", function() {
      return this.mod._clickAckQ(this.subscription._id).then((function(_this) {
        return function() {
          return _this.Models.Subscription.findByIdQ(_this.subscription._id);
        };
      })(this)).should.eventually.have.property('clicks').equals(221);
    });
  });
  return describe("$clickAck()", function() {
    beforeEach(function() {
      this.fakePromise = {
        done: sinon.spy()
      };
      return sinon.stub(this.mod, '_clickAckQ').returns(this.fakePromise);
    });
    it("be a function", function() {
      return this.mod.actions.$clickAck.should.be.a.Function;
    });
    it("sends null", function() {
      return this.mod.actions.$clickAck(this.req, this.res).should.eventually.equal(null);
    });
    it("sets Location header", function() {
      return this.mod.actions.$clickAck(this.req, this.res).then((function(_this) {
        return function() {
          return _this.res.set.calledWith('Location', 'tusharm.com');
        };
      })(this)).should.eventually.be.ok;
    });
    it("sets status to 301", function() {
      return this.mod.actions.$clickAck(this.req, this.res).then((function(_this) {
        return function() {
          return _this.res.status.calledWith(302);
        };
      })(this)).should.eventually.be.ok;
    });
    it("calls the _clickAckQ", function() {
      return this.mod.actions.$clickAck(this.req, this.res).then((function(_this) {
        return function() {
          return _this.mod._clickAckQ.calledWith(_this.req.params.id);
        };
      })(this)).should.eventually.be.ok;
    });
    it("calls the _clickAckQ.done()", function() {
      return this.mod.actions.$clickAck(this.req, this.res).then((function(_this) {
        return function() {
          return _this.fakePromise.done.called;
        };
      })(this)).should.eventually.be.ok;
    });
    return it("throws if uri is not present", function() {
      delete this.req.query.uri;
      return expect((function(_this) {
        return function() {
          return _this.mod.actions.$clickAck(_this.req, _this.res);
        };
      })(this)).to["throw"](ErrorPool.INVALID_PARAMETERS);
    });
  });
});
