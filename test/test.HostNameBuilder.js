// Generated by CoffeeScript 1.9.1
var HostNameBuilder, Injector, WindowProvider;

HostNameBuilder = require('../backend/sdk/HostNameBuilder');

WindowProvider = require('../backend/providers/WindowProvider');

Injector = require('di').Injector;

describe("HostNameBuilder", function() {
  beforeEach(function() {
    this.injector = new Injector([WindowProvider]);
    this.mod = this.injector.get(HostNameBuilder);
    this.window = {
      ma: {
        g: {}
      }
    };
    this.windowP = this.injector.get(WindowProvider);
    return sinon.stub(this.windowP, 'window').returns(this.window);
  });
  describe("getHostWithProtocol()", function() {
    it("throws if setup has not been called", function() {
      return expect((function(_this) {
        return function() {
          return _this.mod.getHostWithProtocol();
        };
      })(this)).to["throw"]('setup the HostNameBuilder first dude!');
    });
    return it("prepends thew current protocol", function() {
      this.window.location = {
        protocol: 'shits:'
      };
      this.window.ma.g = '//fedora:9900/cartoons';
      this.mod.setup();
      return this.mod.getHostWithProtocol().should.equal('shits://fedora:9900');
    });
  });
  return describe("setup()", function() {
    it("be a function", function() {
      return this.mod.setup.should.be.a.Function;
    });
    it("should return hostname with port", function() {
      this.window.ma.g = '//localhost:3000/static/a.js';
      return this.mod.setup().should.equal('localhost:3000');
    });
    it("should return hostname without port", function() {
      this.window.ma.g = '//localhost/static/a.js';
      return this.mod.setup().should.equal('localhost');
    });
    it("should return hostname without protocol", function() {
      this.window.ma.g = '//localhost/static/a.js';
      return this.mod.setup().should.equal('localhost');
    });
    it("should return default hostname", function() {
      delete this.window.ma.g;
      return this.mod.setup().should.equal('app.meanads.com');
    });
    return it("must cache hostname", function() {
      this.window.ma.g = '//localhost/static/a.js';
      this.mod.setup();
      delete this.window.ma.g;
      return this.mod.setup().should.equal('localhost');
    });
  });
});
