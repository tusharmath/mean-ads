// Generated by CoffeeScript 1.9.1
var HttpProviderMock, Injector;

HttpProviderMock = require('./mocks/HttpProviderMock');

Injector = require('di').Injector;

describe("AdCommand", function() {
  beforeEach(function() {
    var HTMLCollection;
    this.injector = new Injector([HttpProviderMock]);
    this.mod = this.injector.getModule('sdk.AdCommand', {
      mock: false
    });
    this.hostName = this.injector.getModule('sdk.HostNameBuilder');
    this.hostName.getHostWithProtocol.returns('shit://mean-ads.io');
    this.http = this.injector.getModule('sdk.HttpProvider', {
      mock: false
    });
    sinon.spy(this.http, 'get');
    this.exec = this.injector.getModule('sdk.CommandExecutor', {
      mock: false
    });
    HTMLCollection = (function() {
      function HTMLCollection() {
        this[0] = {};
        this[1] = {};
      }

      return HTMLCollection;

    })();
    this.window = {
      HTMLCollection: HTMLCollection
    };
    this.windowP = this.injector.getModule('providers.WindowProvider');
    return this.windowP.window.returns(this.window);
  });
  describe("constructor()", function() {
    return it("should register on cmdexec", function() {
      return this.exec._executables['ad'].should.exist;
    });
  });
  describe("execute()", function() {
    beforeEach(function() {
      sinon.stub(this.mod, '_getUrl').returns('fake-http-url');
      this.program = 102;
      this.elements = [{}, {}, {}, {}];
      return this.response = JSON.stringify(['<fake-response></fake-response>']);
    });
    it("be a function", function() {
      return this.mod.execute.should.be.a.Function;
    });
    it("returns null if program is empty", function() {
      return expect(this.mod.execute()).to.equal(null);
    });
    it("calls http.get", function() {
      this.mod.execute(this.program, this.elements);
      return this.http.get.calledWith('fake-http-url').should.be.ok;
    });
    it("updates the innerHtml", function() {
      this.mod.execute(this.program, this.elements);
      this.http.$flush(this.response, null, null);
      return this.elements[0].innerHTML.should.equal('<fake-response></fake-response>');
    });
    it("handles non array elements", function() {
      var el;
      this.mod.execute(this.program, el = {});
      this.http.$flush(this.response, null, null);
      return el.innerHTML.should.equal('<fake-response></fake-response>');
    });
    return it("handles non HTMLCollection elements", function() {
      var el;
      this.mod.execute(this.program, el = new this.window.HTMLCollection);
      this.http.$flush(this.response, null, null);
      return el[0].innerHTML.should.equal('<fake-response></fake-response>');
    });
  });
  return describe("_getUrl()", function() {
    it("creates query params with both p and k", function() {
      return this.mod._getUrl('abc', ['a', 'b', 'c']).should.equal('shit://mean-ads.io/api/v1/dispatch/abc?k=a&k=b&k=c&l=1');
    });
    return it("creates query params with only p", function() {
      return this.mod._getUrl('abc').should.equal('shit://mean-ads.io/api/v1/dispatch/abc?l=1');
    });
  });
});
