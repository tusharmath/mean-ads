// Generated by CoffeeScript 1.9.1
var ErrorPool, Injector, MongooseProviderMock, Provide, Q, _, _json, annotate, mockDataSetup, ref;

MongooseProviderMock = require('./mocks/MongooseProviderMock');

mockDataSetup = require('./mocks/MockData').mockDataSetup;

ref = require('di'), annotate = ref.annotate, Injector = ref.Injector, Provide = ref.Provide;

Q = require('q');

_ = require('lodash');

ErrorPool = require('../backend/config/error-codes').ErrorPool;

_json = function(obj) {
  return JSON.parse(JSON.stringify(obj));
};

describe('Dispatcher:', function() {
  beforeEach(function() {
    this.injector = new Injector([MongooseProviderMock]);
    this.mod = this.injector.getModule('modules.Dispatcher', {
      mock: false
    });
    this.mod.Models = {};
    this.mongo = this.injector.getModule('providers.MongooseProvider', {
      mock: false
    });
    this.date = this.injector.getModule('providers.DateProvider');
    this.date.now.returns(new Date(2014, 1, 2));
    this.Models = this.injector.getModule('factories.ModelFactory', {
      mock: false
    });
    this.mockDataSetup = mockDataSetup;
    this.mockPromise = {
      done: sinon.spy()
    };
    this.dispatchDelivery = this.injector.getModule('modules.DispatchPostDelivery');
    this.dispatchDelivery.delivered.returns(this.mockPromise);
    return this.dispatchFac = this.injector.getModule('factories.DispatchFactory', {
      mock: false
    });
  });
  afterEach(function() {
    return this.Models.mongooseP.__reset();
  });
  describe("next()", function() {
    beforeEach(function() {
      return this.mockDataSetup();
    });
    it("queries by program id", function() {
      return this.mod.next(this.program._id).then(function(d) {
        return d[0];
      }).should.eventually.have.property('markup').equal("hello world 1");
    });
    it("queries null with keywords", function() {
      return this.mod.next(this.program._id, {
        keywords: ['ff']
      }).should.eventually.be.of.length(0);
    });
    it("queries with keywords", function() {
      return this.mod.next(this.program._id, {
        keywords: ['aa']
      }).should.eventually.be.of.length(1);
    });
    it("calls postDelivery methods thrice", function() {
      return this.mod.next(this.program._id, {
        limit: 3
      }).then((function(_this) {
        return function() {
          return _this.dispatchDelivery.delivered.calledThrice;
        };
      })(this)).should.eventually.be.ok;
    });
    it("calls postDelivery with args", function() {
      return this.mod.next(this.program._id, {
        keywords: ['aa', 'bb']
      }).then((function(_this) {
        return function() {
          var dispatch, keyName, ref1;
          ref1 = _this.dispatchDelivery.delivered.getCall(0).args, dispatch = ref1[0], keyName = ref1[1];
          keyName.should.deep.equal(['aa', 'bb']);
          return dispatch._id.should.deep.equal(_this.dispatch._id);
        };
      })(this));
    });
    it("resolves to the dispatch", function() {
      return this.mod.next(this.program._id).then(function(d) {
        return d[0];
      }).should.eventually.have.property('_id').to.deep.equal(this.dispatch._id);
    });
    it("calls done of _postDelivery()", function() {
      return this.mod.next(this.program._id, {
        limit: 3
      }).then((function(_this) {
        return function() {
          return _this.mockPromise.done.calledThrice.should.be.ok;
        };
      })(this));
    });
    it("resolves to null if startDate is greater than currentDate", function() {
      this.date.now.returns(new Date(2014, 0, 1));
      return this.mod.next(this.program._id).should.eventually.be.of.length(0);
    });
    it("resolves to Dispatch if startDate is less than currentDate", function() {
      this.date.now.returns(new Date(2014, 2, 1));
      return this.mod.next(this.program._id).then(function(d) {
        return d[0];
      }).should.eventually.have.property('_id').to.deep.equal(this.dispatch._id);
    });
    return it("resolves to an array of length equal to limit", function() {
      return this.mod.next(this.program._id, {
        limit: 2
      }).should.eventually.be.of.length(2);
    });
  });
  describe("getAllowedOrigins()", function() {
    it("returns an array", function() {
      return this.mod.getAllowedOrigins().should.deep.equal([]);
    });
    it("returns the first allowed origin", function() {
      var dispatches;
      dispatches = [
        {
          allowedOrigins: ['a']
        }, {
          allowedOrigins: []
        }, {
          allowedOrigins: ['b', 'c']
        }
      ];
      return this.mod.getAllowedOrigins(dispatches).should.deep.equal(['a']);
    });
    return it("ignores empty allowedOrigins", function() {
      var dispatches;
      dispatches = [
        {
          allowedOrigins: []
        }, {
          allowedOrigins: ['b', 'c']
        }, {
          allowedOrigins: ['a']
        }
      ];
      return this.mod.getAllowedOrigins(dispatches).should.deep.equal(['b', 'c']);
    });
  });
  describe("subscriptionCreated()", function() {
    beforeEach(function() {
      return sinon.stub(this.dispatchFac, 'createForSubscriptionId').resolves('ok');
    });
    it("calls createForSubscriptionId", function() {
      return this.mod.subscriptionCreated(123345).then((function(_this) {
        return function(data) {
          data.should.equal('ok');
          return _this.dispatchFac.createForSubscriptionId.calledWith(123345).should.be.ok;
        };
      })(this));
    });
    return it("calls _createDispatchable", function() {
      return this.mod.subscriptionCreated(123345).should.eventually.equal('ok');
    });
  });
  describe("subscriptionUpdated()", function() {
    beforeEach(function() {
      return sinon.stub(this.dispatchFac, 'updateForSubscriptionId').resolves('ok');
    });
    it("calls updateForSubscriptionId", function() {
      return this.mod.subscriptionUpdated(123345).then((function(_this) {
        return function(data) {
          data.should.equal('ok');
          return _this.dispatchFac.updateForSubscriptionId.calledWith(123345).should.be.ok;
        };
      })(this));
    });
    return it("calls _createDispatchable", function() {
      return this.mod.subscriptionUpdated(123345).should.eventually.equal('ok');
    });
  });
  return describe("_resourceUpdated()", function() {
    beforeEach(function() {
      sinon.stub(this.mod, 'campaignUpdated').resolves(100);
      return this.mockDataSetup();
    });
    return it("resolves an array", function() {
      var match, resource;
      resource = 'Campaign';
      match = 'program';
      return this.mod._resourceUpdated(resource, match, this.program._id).should.eventually.eql([100]);
    });
  });
});
