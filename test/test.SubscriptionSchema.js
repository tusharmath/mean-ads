// Generated by CoffeeScript 1.9.1
var Injector, MongooseProviderMock, Provide, Q, annotate, mockDataSetup, ref;

MongooseProviderMock = require('./mocks/MongooseProviderMock');

mockDataSetup = require('./mocks/MockData').mockDataSetup;

ref = require('di'), annotate = ref.annotate, Injector = ref.Injector, Provide = ref.Provide;

Q = require('q');

describe('SubscriptionSchema:', function() {
  beforeEach(function() {
    this.injector = new Injector([MongooseProviderMock]);
    this.mod = this.injector.getModule('modules.Dispatcher', {
      mock: false
    });
    this.mod.Models = {};
    this.mongo = this.injector.getModule('providers.MongooseProvider', {
      mock: false
    });
    this.Models = this.injector.getModule('factories.ModelFactory', {
      mock: false
    });
    return this.mockDataSetup = mockDataSetup;
  });
  afterEach(function() {
    return this.mongo.__reset();
  });
  return describe("hasCredits()", function() {
    beforeEach(function() {
      return this.mockDataSetup();
    });
    it("it exists", function() {
      return this.subscription.hasCredits.should.exist;
    });
    it("returns true", function() {
      this.subscription.usedCredits = 10;
      this.subscription.totalCredits = 100;
      return this.subscription.hasCredits.should.be["true"];
    });
    return it("returns false", function() {
      this.subscription.usedCredits = 100;
      this.subscription.totalCredits = 100;
      return this.subscription.hasCredits.should.be["false"];
    });
  });
});
