// Generated by CoffeeScript 1.9.1
var DateProvider, DispatchFactory, DispatchPostDelivery, ErrorPool, Injector, ModelFactory, MongooseProvider, MongooseProviderMock, Provide, Q, SubscriptionPopulator, _json, annotate, mockDataSetup, ref;

DispatchPostDelivery = require('../backend/modules/DispatchPostDelivery');

SubscriptionPopulator = require('../backend/modules/SubscriptionPopulator');

DispatchFactory = require('../backend/factories/DispatchFactory');

MongooseProviderMock = require('./mocks/MongooseProviderMock');

MongooseProvider = require('../backend/providers/MongooseProvider');

DateProvider = require('../backend/providers/DateProvider');

ModelFactory = require('../backend/factories/ModelFactory');

mockDataSetup = require('./mocks/MockData').mockDataSetup;

ref = require('di'), annotate = ref.annotate, Injector = ref.Injector, Provide = ref.Provide;

Q = require('q');

ErrorPool = require('../backend/config/error-codes').ErrorPool;

_json = function(obj) {
  return JSON.parse(JSON.stringify(obj));
};

describe('DispatchPostDelivery:', function() {
  beforeEach(function() {
    this.injector = new Injector([MongooseProviderMock]);
    this.mod = this.injector.get(DispatchPostDelivery);
    this.mod.Models = {};
    this.subPopulator = this.injector.get(SubscriptionPopulator);
    this.mongo = this.injector.get(MongooseProvider);
    this.date = this.injector.get(DateProvider);
    this.Models = this.injector.get(ModelFactory);
    this.dispatchFac = this.injector.get(DispatchFactory);
    return this.mockDataSetup = mockDataSetup;
  });
  afterEach(function() {
    return this.Models.mongooseP.__reset();
  });
  describe("_increaseUsedCredits()", function() {
    beforeEach(function() {
      return this.mockDataSetup().then((function(_this) {
        return function() {
          return _this.Models.Subscription.findByIdAndUpdate(_this.subscription._id, {
            usedCredits: 100
          }).execQ();
        };
      })(this)).then((function(_this) {
        return function() {
          return _this.subPopulator.populateSubscription(_this.subscription);
        };
      })(this)).then((function(_this) {
        return function(subscriptionP) {
          _this.subscriptionP = subscriptionP;
        };
      })(this));
    });
    it("updates used credits", function() {
      return this.mod._increaseUsedCredits(this.subscriptionP, 20).should.eventually.have.property('usedCredits').equal(120);
    });

    /*
    		it "ignore credits if pricing isnt CPM", ->
    			@subscriptionP.campaign.program.pricing = "CPA"
    			@mod._increaseUsedCredits @subscriptionP, 20
    			.should.eventually.have.property 'usedCredits'
    			.equal 100
     */
    return it("increases impressions", function() {
      return this.mod._increaseUsedCredits(this.subscriptionP).should.eventually.have.property('impressions').equal(1001);
    });
  });
  describe("_updateDeliveryDate()", function() {
    beforeEach(function() {
      return this.mockDataSetup().then((function(_this) {
        return function() {
          return _this.dispatchFac.createForSubscriptionId(_this.subscription._id);
        };
      })(this)).then((function(_this) {
        return function(dispatch) {
          _this.dispatch = dispatch;
          return _this.dispatch.update({
            lastDeliveredOn: new Date(10, 10, 10)
          });
        };
      })(this));
    });
    return it("updates delivery date", function() {
      return this.mod._updateDeliveryDate(this.dispatch).then((function(_this) {
        return function() {
          return _this.dispatch.lastDeliveredOn.should.be.greaterThan(new Date(10, 10, 10));
        };
      })(this));
    });
  });
  describe("delivered()", function() {
    beforeEach(function() {
      sinon.stub(this.mod, '_getImpressionCost').returns(35);
      return this.mockDataSetup().then((function(_this) {
        return function() {
          return _this.dispatchFac.createForSubscriptionId(_this.subscription._id);
        };
      })(this)).then((function(_this) {
        return function(dispatch) {
          _this.dispatch = dispatch;
        };
      })(this));
    });
    it("updates used credits of subscription", function() {
      var initialCredits;
      initialCredits = this.subscription.usedCredits;
      return this.mod.delivered(this.dispatch).then((function(_this) {
        return function() {
          return _this.Models.Subscription.findByIdQ(_this.subscription._id);
        };
      })(this)).should.eventually.have.property('usedCredits').to.equal(initialCredits + 35);
    });
    it("updates last delivery date of dispatch", function() {
      sinon.spy(this.mod, '_updateDeliveryDate');
      return this.mod.delivered(this.dispatch).then((function(_this) {
        return function() {
          return _this.mod._updateDeliveryDate.called.should.be.ok;
        };
      })(this));
    });

    /* TODO: Remove subscriptions dont expire
    		it "removes expired subscriptions", ->
    			sinon.stub @utils, 'hasSubscriptionExpired'
    			.returns yes
    			@mod.delivered @dispatch
    			.then => @Models.Dispatch.findByIdQ @dispatch._id
    			.should.eventually.equal null
     */
    it("removes exausted subscriptions", function() {
      sinon.stub(this.mod, '_increaseUsedCredits').resolves({
        hasCredits: false,
        _id: this.subscription._id
      });
      return this.mod.delivered(this.dispatch).then((function(_this) {
        return function() {
          return _this.Models.Dispatch.findByIdQ(_this.dispatch._id);
        };
      })(this)).should.eventually.equal(null);
    });
    it("removes dispatches for not found subscriptions", function() {
      sinon.spy(this.dispatchFac, 'removeForSubscriptionId');
      sinon.stub(this.subPopulator, 'populateSubscription').resolves(null);
      return this.mod.delivered(this.dispatch).then((function(_this) {
        return function() {
          _this.dispatchFac.removeForSubscriptionId.callCount.should.equal(1);
          return _this.Models.Dispatch.findByIdQ(_this.dispatch._id);
        };
      })(this)).should.eventually.equal(null);
    });

    /* TODO:remove invalid scenario
    		it "removes over exausted subscriptions", ->
    			sinon.stub @mod, '_increaseUsedCredits'
    			.resolves { usedCredits: 101, totalCredits: 100, _id: @subscription._id}
    			 * sinon.stub @utils, 'hasSubscriptionExpired'
    			 * .returns no
    			@mod.delivered @dispatch
    			.then => @Models.Dispatch.findByIdQ @dispatch._id
    			.should.eventually.equal null
     */
    return it("calls _getImpressionCost with keywords", function() {
      var keywords;
      keywords = ['aa', 'bb', 'cc'];
      sinon.stub(this.subPopulator, 'populateSubscription').resolves(this.subscriptionP = {
        impressions: 0,
        usedCredits: 10
      });
      return this.mod.delivered(this.dispatch, keywords).then((function(_this) {
        return function() {
          return _this.mod._getImpressionCost.calledWith(_this.subscriptionP, keywords);
        };
      })(this)).should.eventually.be.ok;
    });
  });
  return describe("_getImpressionCost()", function() {
    beforeEach(function() {
      return this.subscriptionP = {
        keywords: ['aa', 'bb', 'cc', 'dd'],
        campaign: {
          keywordPricing: [
            {
              keyName: 'aa',
              keyPrice: 10
            }, {
              keyName: 'bb',
              keyPrice: 20
            }, {
              keyName: 'cc',
              keyPrice: 300
            }, {
              keyName: 'dd',
              keyPrice: 40
            }
          ],
          defaultCost: 100
        }
      };
    });
    it("be a function", function() {
      return this.mod._getImpressionCost.should.be.a["function"];
    });
    it("returns default cost", function() {
      this.mod._getImpressionCost(this.subscriptionP, ['ee']).should.equal(0.1);
      return this.mod._getImpressionCost(this.subscriptionP).should.equal(0.1);
    });
    return it("returns price of keyword", function() {
      this.mod._getImpressionCost(this.subscriptionP, ['aa']).should.equal(0.01);
      this.mod._getImpressionCost(this.subscriptionP, ['aa', 'bb']).should.equal(0.02);
      return this.mod._getImpressionCost(this.subscriptionP, ['abc', 'bb']).should.equal(0.02);
    });
  });
});
