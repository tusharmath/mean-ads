// Generated by CoffeeScript 1.9.1
var HostNameBuilder, HttpProviderMock, Injector, Main, WindowProvider;

Main = require('../backend/sdk/Main');

WindowProvider = require('../backend/providers/WindowProvider');

HostNameBuilder = require('../backend/sdk/HostNameBuilder');

HttpProviderMock = require('./mocks/HttpProviderMock');

Injector = require('di').Injector;

describe("Main", function() {
  beforeEach(function() {
    this.injector = new Injector([HttpProviderMock]);
    this.host = this.injector.get(HostNameBuilder);
    sinon.spy(this.host, 'setup');
    this.exec = this.injector.getModule('sdk.CommandExecutor');
    this.mod = this.injector.get(Main);
    this.window = {
      ma: {
        g: 'http://localhost:8080'
      }
    };
    this.windowP = this.injector.get(WindowProvider);
    return sinon.stub(this.windowP, 'window').returns(this.window);
  });
  describe("setup()", function() {
    before(function() {
      return sinon.spy(Main.prototype, 'ma');
    });
    after(function() {
      return Main.prototype.ma.restore();
    });
    it("be a function", function() {
      return this.mod.setup.should.be.a.Function;
    });
    it("setups the hostnamebuilder", function() {
      this.mod.setup();
      return this.host.setup.called.should.be.ok;
    });
    it("overrides the original ma", function() {
      this.mod.setup();
      return this.window.ma.should.equal(this.mod.ma);
    });
    it("executes the commands", function() {
      this.window.ma.q = [['ad', '1234', 'abc'], ['pad', '4321', 'qwerty']];
      this.mod.setup();
      this.exec.execute.callCount.should.equal(2);
      return this.exec.execute.calledWith('ad', ['1234', 'abc']).should.be.ok;
    });
    it("shouldnt call if ma object is not present", function() {
      delete this.window.ma;
      this.mod.setup();
      return this.exec.execute.callCount.should.equal(0);
    });
    return it("context should be static for ma", function() {
      this.mod.setup();
      this.window.ma();
      return Main.prototype.ma.calledOn(this.mod).should.be.ok;
    });
  });
  return describe("ma()", function() {
    return it("calls executables", function() {
      this.mod.ma('convert', 'AEvFxjRyb6', {
        flag: true
      });
      return this.exec.execute.calledWith('convert', [
        'AEvFxjRyb6', {
          flag: true
        }
      ]).should.be.ok;
    });
  });
});
