// Generated by CoffeeScript 1.9.1
var Injector, ModelFactory, MongooseProvider, MongooseProviderMock, RequireProvider;

ModelFactory = require('../backend/factories/ModelFactory');

MongooseProvider = require('../backend/providers/MongooseProvider');

RequireProvider = require('../backend/providers/RequireProvider');

MongooseProviderMock = require('./mocks/MongooseProviderMock');

Injector = require('di').Injector;

describe('ModelFactory:', function() {
  beforeEach(function() {
    this.injector = new Injector([MongooseProviderMock]);
    this.mod = this.injector.get(ModelFactory);
    this.mongooseP = this.injector.get(MongooseProvider);
    return this.requireProvider = this.injector.get(RequireProvider);
  });
  afterEach(function() {
    return this.mongooseP.__reset();
  });
  describe("reduce()", function() {
    beforeEach(function() {
      var MockSchema;
      MockSchema = function(mongoose) {
        return new mongoose.Schema({
          field_1: {
            type: String
          }
        });
      };
      return sinon.stub(this.requireProvider, 'require').returns(MockSchema);
    });
    it("function", function() {
      return this.mod._reduce.should.be.a.Function;
    });
    it("reduces instance", function() {
      return this.mod._reduce({}, 'woodo').woodo.findById.should.be.a.Function;
    });
    it("supports Q", function() {
      return this.mod._reduce({}, 'woodo').woodo.findById(1).execQ.should.be.a.Function;
    });
    it("throws an error if resourceName is not provided", function() {
      return expect((function(_this) {
        return function() {
          return _this.mod._reduce('woodo');
        };
      })(this)).to["throw"]('resourceName is required');
    });
    return it("enables saving data", function() {
      var doc, models;
      models = this.mod._reduce({}, 'doodo');
      doc = new models.doodo({
        field_1: 'honeySingh'
      });
      return doc.saveQ().then(function() {
        return models.doodo.findOne().execQ().should.eventually.have.property('_id');
      });
    });
  });
  return describe("this", function() {
    return it("returns all the models", function() {
      return this.mod.Subscription.should.exist;
    });
  });
});
