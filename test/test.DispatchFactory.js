// Generated by CoffeeScript 1.9.1
var ErrorPool, Injector, MongooseProviderMock, Provide, Q, _json, annotate, mockDataSetup, ref;

MongooseProviderMock = require('./mocks/MongooseProviderMock');

mockDataSetup = require('./mocks/MockData').mockDataSetup;

ref = require('di'), annotate = ref.annotate, Injector = ref.Injector, Provide = ref.Provide;

Q = require('q');

ErrorPool = require('../backend/config/error-codes').ErrorPool;

_json = function(obj) {
  return JSON.parse(JSON.stringify(obj));
};

describe('DispatchFactory:', function() {
  beforeEach(function() {
    this.injector = new Injector([MongooseProviderMock]);
    this.mod = this.injector.getModule('factories.DispatchFactory', {
      mock: false
    });
    this.mod.Models = {};
    this.subPopulator = this.injector.getModule('modules.SubscriptionPopulator', {
      mock: false
    });
    this.mongo = this.injector.getModule('providers.MongooseProvider', {
      mock: false
    });
    this.Models = this.injector.getModule('factories.ModelFactory', {
      mock: false
    });
    return this.mockDataSetup = mockDataSetup;
  });
  afterEach(function() {
    return this.Models.mongooseP.__reset();
  });
  describe("_interpolateMarkup()", function() {
    beforeEach(function() {
      sinon.spy(this.mod, '_attachRedirectURI');
      return this.mockDataSetup().then((function(_this) {
        return function() {
          return _this.subPopulator.populateSubscription(_this.subscription);
        };
      })(this)).then((function(_this) {
        return function(subscriptionP) {
          _this.subscriptionP = subscriptionP;
        };
      })(this));
    });
    it("creates html WITHOUT css", function() {
      var _id;
      _id = this.subscriptionP.campaign.program.style._id;
      this.subscriptionP.campaign.program.style.css = '';
      return this.mod._interpolateMarkup(this.subscriptionP).should.eventually.equal("<div class=\"ae-" + _id + "\"><div>aaa</div><h2 href=\"ccc\">bbb</h2></div>");
    });
    it("creates html WITH css", function() {
      var _id;
      _id = this.subscriptionP.campaign.program.style._id;
      return this.mod._interpolateMarkup(this.subscriptionP).should.eventually.equal("<style>.ae-" + _id + " p{position:absolute}.ae-" + _id + " a.selected{color:#f3a}</style><div class=\"ae-" + _id + "\"><div>aaa</div><h2 href=\"ccc\">bbb</h2></div>");
    });
    it("calls HTML minifier", function() {
      var _id, style;
      _id = this.subscriptionP.campaign.program.style._id;
      style = this.subscriptionP.campaign.program.style;
      style.html = "<div> A A A </div>    <p> B B B </p>";
      style.css = '';
      return this.mod._interpolateMarkup(this.subscriptionP).should.eventually.equal("<div class=\"ae-" + _id + "\"><div>A A A</div><p>B B B</p></div>");
    });
    return it("calls _attachRedirectURI with subscription", function() {
      return this.mod._interpolateMarkup(this.subscriptionP).then((function(_this) {
        return function() {
          return _this.mod._attachRedirectURI.calledWith(_this.subscriptionP);
        };
      })(this)).should.eventually.be.ok;
    });
  });
  describe("_createDispatchable()", function() {
    beforeEach(function() {
      sinon.stub(this.mod, '_interpolateMarkup').resolves('hello world');
      return this.mockDataSetup().then((function(_this) {
        return function() {
          return _this.subPopulator.populateSubscription(_this.subscription);
        };
      })(this)).then((function(_this) {
        return function(subscriptionP) {
          _this.subscriptionP = subscriptionP;
        };
      })(this));
    });
    it("save dispatch", function() {
      this.subscriptionP.campaign.program.allowedOrigins = ['http://a.com', 'http://b.com'];
      return this.mod._createDispatchable(this.subscriptionP).then((function(_this) {
        return function(dispatch) {
          dispatch = _json(dispatch);
          dispatch.markup.should.equal('hello world');
          dispatch.subscription.toString().should.eql(_this.subscriptionP._id.toString());
          dispatch.program.toString().should.eql(_this.subscriptionP.campaign.program._id.toString());
          dispatch.keywords.should.deep.equal(['inky', 'pinky', 'ponky']);
          return dispatch.allowedOrigins.should.deep.equal(['http://a.com', 'http://b.com']);
        };
      })(this));
    });
    it("Ignores dispatch if campaign is not enabled", function() {
      this.subscriptionP.campaign.isEnabled = false;
      return this.mod._createDispatchable(this.subscriptionP).then((function(_this) {
        return function() {
          return _this.Models.Dispatch.count().execQ();
        };
      })(this)).should.eventually.equal(3);
    });
    it("Ignores dispatch if used credits equal totalCredits", function() {
      this.subscriptionP.usedCredits = this.subscriptionP.totalCredits = 120;
      return this.mod._createDispatchable(this.subscriptionP).then((function(_this) {
        return function() {
          return _this.Models.Dispatch.count().execQ();
        };
      })(this)).should.eventually.equal(3);
    });

    /* TODO: remove Subscriptions don't expire
    		it "Ignores dispatch, subscription has expired", ->
    			@date.now.returns new Date 2010, 1, 1
    			@mod._createDispatchable @subscriptionP
    			.then => @Models.Dispatch.count().execQ()
    			.should.eventually.equal 3
     */
    return it("Creates a Dispatch with subscription start date", function() {
      var startDate;
      this.subscriptionP.startDate = startDate = new Date(Date.now());
      return this.mod._createDispatchable(this.subscriptionP).should.eventually.have.property('startDate').to.equalDate(startDate);
    });
  });
  describe("removeForSubscriptionId()", function() {
    beforeEach(function() {
      sinon.stub(this.mod, '_interpolateMarkup').resolves('hello world');
      return this.mockDataSetup().then((function(_this) {
        return function() {
          return _this.subPopulator.populateSubscription(_this.subscription);
        };
      })(this)).then((function(_this) {
        return function(subscriptionP) {
          _this.subscriptionP = subscriptionP;
          return _this.mod._createDispatchable(_this.subscriptionP);
        };
      })(this)).then((function(_this) {
        return function(dispatch1) {
          _this.dispatch = dispatch1;
        };
      })(this));
    });
    return it("expectation", function() {
      return this.mod.removeForSubscriptionId(this.subscription._id).then((function(_this) {
        return function() {
          return _this.Models.Dispatch.findByIdQ(_this.dispatch._id);
        };
      })(this)).then(function(data) {
        return expect(data).to.be["null"];
      });
    });
  });
  describe("createForSubscriptionId()", function() {
    beforeEach(function() {
      sinon.stub(this.subPopulator, 'populateSubscription').resolves('sub-data');
      return sinon.stub(this.mod, '_createDispatchable').resolves('disp-data');
    });
    it("calls _populateSubscription", function() {
      return this.mod.createForSubscriptionId(123345).then((function(_this) {
        return function() {
          return _this.subPopulator.populateSubscription.calledWith(123345).should.be.ok;
        };
      })(this));
    });
    return it("calls _createDispatchable", function() {
      return this.mod.createForSubscriptionId(123345).should.eventually.equal('disp-data');
    });
  });
  describe("updateForSubscriptionId()", function() {
    beforeEach(function() {
      sinon.stub(this.mod, 'removeForSubscriptionId').resolves(null);
      return sinon.stub(this.mod, 'createForSubscriptionId').resolves('subscription-created');
    });
    it("calls removeForSubscriptionId", function() {
      return this.mod.updateForSubscriptionId(123456).then((function(_this) {
        return function() {
          return _this.mod.removeForSubscriptionId.calledWith(123456).should.be.ok;
        };
      })(this));
    });
    return it("calls createForSubscriptionId", function() {
      return this.mod.updateForSubscriptionId(123456).should.eventually.equal('subscription-created');
    });
  });
  return describe("_attachRedirectURI()", function() {
    return it("attaches redirect uri to subscription data", function() {
      var subscription;
      subscription = {
        _id: '707218d9-e69d-48b0-9d51-183887275a0b',
        data: {
          video_image: 'delta-gun',
          page_uri: 'alpha-bravo',
          name_uri: 'charlie-delta'
        }
      };
      this.mod._attachRedirectURI(subscription);
      subscription.data.page_uri.should.equal('//localhost:3000/api/v1/subscription/707218d9-e69d-48b0-9d51-183887275a0b/ack?uri=alpha-bravo');
      return subscription.data.video_image.should.equal('delta-gun');
    });
  });
});
