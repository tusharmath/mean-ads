// Generated by CoffeeScript 1.9.1
var Injector, Q, _, chai, sinonAsPromised;

require('mock-promises');

chai = require('chai');

chai.use(require('chai-datetime'));

global.should = chai.should();

global.expect = chai.expect;

chai.use(require("chai-as-promised"));

global.bragi = {
  log: function() {},
  util: {
    symbols: {}
  }
};

global.sinon = require('sinon');

Q = require('q');

sinonAsPromised = require('sinon-as-promised')(Q.Promise);

_ = require('lodash');


/*
	DI Auto Mocker
 */

Injector = require('di').Injector;

global.Injector = Injector;

Injector.prototype.getModule = function(path, _options) {
  var Module, instance, options;
  if (_options == null) {
    _options = {};
  }
  options = {
    mock: true,
    basePath: '../backend/'
  };
  _.assign(options, _options);
  path = options.basePath + path.replace('.', '/');
  Module = require(path);
  instance = this.get(Module);
  if (options.mock === true) {
    _.each(Module.prototype, function(v, k) {
      if (typeof v === 'function') {
        return sinon.stub(instance, k);
      }
    });
  }
  return instance;
};
