// Generated by CoffeeScript 1.9.1
var Injector, JadeProvider, JuiceProvider, Mailer, MailgunProvider, MailgunProviderMock;

Mailer = require('../backend/modules/Mailer');

JadeProvider = require('../backend/providers/JadeProvider');

MailgunProvider = require('../backend/providers/MailgunProvider');

MailgunProviderMock = require('./mocks/MailgunProviderMock');

JuiceProvider = require('../backend/providers/JuiceProvider');

Injector = require('di').Injector;

describe('Mailer:', function() {
  beforeEach(function() {
    this.injector = new Injector([MailgunProviderMock]);
    this.mod = this.injector.get(Mailer);
    this.mailP = this.injector.get(MailgunProvider);
    this.juice = this.injector.get(JuiceProvider);
    this.templateFn = sinon.stub().returns('<div>hi</div>');
    this.jade = this.injector.get(JadeProvider);
    return sinon.stub(this.jade, 'compileFile').returns(this.templateFn);
  });
  describe("interpolate()", function() {
    it("be a function", function() {
      return this.mod.interpolate.should.be.a.Function;
    });
    it("compiles jade templates", function() {
      var template, templatePath;
      template = 'subscription-report';
      templatePath = "./frontend/templates/mailers/subscription-report-tmpl.jade";
      this.mod.interpolate(template);
      return this.jade.compileFile.calledWith(templatePath).should.be.ok;
    });
    return it("compiles jade templates", function() {
      var locals, template;
      template = 'subscription-report';
      locals = {
        a: 1,
        b: 2
      };
      this.mod.interpolate(template, locals);
      return this.templateFn.calledWith(locals).should.be.ok;
    });
  });
  return describe("sendQ()", function() {
    beforeEach(function() {
      sinon.stub(this.mod, 'interpolate').returns('<div> whoopie </div>');
      sinon.stub(this.juice, 'juiceContentQ').resolves('<div> poopie </div>');
      return this.options = {
        from: 'bizcostsavers <noreply@meanads.com>',
        to: 'tusharmath@gmail.com',
        subject: 'waddup guys',
        template: '<div>hi</div>',
        locals: {
          a: 1,
          b: 2
        }
      };
    });
    it("it calls interpolate", function() {
      return this.mod.sendQ(this.options).then((function(_this) {
        return function() {
          return _this.mod.interpolate.calledWith(_this.options.template, _this.options.locals);
        };
      })(this)).should.eventually.be.ok;
    });
    it("it calls juiceContent", function() {
      return this.mod.sendQ(this.options).then((function(_this) {
        return function() {
          return _this.juice.juiceContentQ.calledWith('<div> whoopie </div>');
        };
      })(this)).should.eventually.be.ok;
    });
    it("it sends a request to mailgun", function() {
      return this.mod.sendQ(this.options).should.eventually.be.equal('sent-mailgun-request');
    });
    it("it calls sendMessageQ", function() {
      var from, ref, subject, to;
      ref = this.options, from = ref.from, to = ref.to, subject = ref.subject;
      return this.mod.sendQ(this.options).then((function(_this) {
        return function() {
          return _this.mailP.sendMessageQ.calledWith(from, to, subject, '<div> poopie </div>');
        };
      })(this)).should.eventually.be.ok;
    });
    return it("it attaches humanize to locals", function() {
      var locals;
      locals = this.options.locals;
      return this.mod.sendQ(this.options).then(function() {
        return locals;
      }).should.eventually.have.property('humanize');
    });
  });
});
