// Generated by CoffeeScript 1.9.1
var CommandExecutor, Injector, WindowProvider;

CommandExecutor = require('../backend/sdk/CommandExecutor');

WindowProvider = require('../backend/providers/WindowProvider');

Injector = require('di').Injector;

describe("CommandExecutor", function() {
  beforeEach(function() {
    this.injector = new Injector;
    return this.mod = this.injector.get(CommandExecutor);
  });
  describe("register()", function() {
    it("be a function", function() {
      return this.mod.register.should.be.a.Function;
    });
    it("adds the command to executables", function() {
      var exe;
      exe = {
        alias: 'load-my-gun'
      };
      this.mod.register(exe);
      return this.mod._executables['load-my-gun'].should.equal(exe);
    });
    return it("must thow if alias is not found", function() {
      var exe;
      exe = {};
      return expect((function(_this) {
        return function() {
          return _this.mod.register(exe);
        };
      })(this)).to["throw"]('Alias not found dude!');
    });
  });
  return describe("execute()", function() {
    beforeEach(function() {
      this.lmg1 = {
        alias: 'load-my-gun-1',
        execute: sinon.spy()
      };
      return this.mod.register(this.lmg1);
    });
    it("be a function", function() {
      return this.mod.execute.should.be.a.Function;
    });
    it("executes the command.execute method", function() {
      this.mod.execute('load-my-gun-1');
      return this.lmg1.execute.called.should.be.ok;
    });
    it("should not throw if command is not register", function() {
      return expect((function(_this) {
        return function() {
          return _this.mod.execute('load-my-gun-2');
        };
      })(this)).to.not["throw"]();
    });
    it("should pass args to execute method", function() {
      this.mod.execute('load-my-gun-1', [1, 2, 3]);
      return this.lmg1.execute.calledWith(1, 2, 3).should.be.ok;
    });
    it("should throw if args is not in array format", function() {
      return expect((function(_this) {
        return function() {
          return _this.mod.execute('load-my-gun-1', 100);
        };
      })(this)).to["throw"]();
    });
    it("should call execute with the action context", function() {
      this.mod.execute('load-my-gun-1');
      return this.lmg1.execute.calledOn(this.mod._executables['load-my-gun-1']).should.be.ok;
    });
    return it("should not throw if execute command is not found", function() {
      var lmg1;
      lmg1 = {
        alias: 'load-my-gun-1',
        execute1: sinon.spy()
      };
      this.mod.register(lmg1);
      return expect((function(_this) {
        return function() {
          return _this.mod.execute('load-my-gun-1');
        };
      })(this)).to.not["throw"]();
    });
  });
});
