// Generated by CoffeeScript 1.9.1
var ErrorPool, Q, ioc;

ioc = require('./ioc');

Q = require('q');

ErrorPool = require('../backend/config/error-codes').ErrorPool;

describe('BaseController:', function() {
  beforeEach(function() {
    ioc.resolve('controllers.BaseController').bindOn(this);
    return this.mod.resourceName = 'Subscription';
  });
  afterEach(function() {
    return this.afterEach();
  });
  describe("getModel()", function() {
    it("throws if resource name is not found", function() {
      this.mod.resourceName = 'FakeResource';
      return expect((function(_this) {
        return function() {
          return _this.mod.getModel();
        };
      })(this)).to["throw"]('FakeResource was not found');
    });
    return it("returns model", function() {
      return this.mod.getModel().should.equal(this.mod.models.Subscription);
    });
  });
  return describe("$controllers:", function() {
    beforeEach(function() {
      var FakeSchema;
      FakeSchema = {
        name: String,
        age: Number,
        owner: Number
      };
      this.req = {
        user: {
          sub: 123
        },
        body: {
          name: 'Tushar',
          age: 10
        },
        params: {
          id: 123
        }
      };
      sinon.stub(this.mod, 'getModel').returns(this.mongo.__fakeModel(FakeSchema));
      return Q.all([
        this.mod.$create({
          user: {
            sub: 1000
          },
          body: {
            name: 'TusharA',
            age: 20
          }
        }), this.mod.$create({
          user: {
            sub: 1000
          },
          body: {
            name: 'TusharB',
            age: 20
          }
        }), this.mod.$create({
          user: {
            sub: 1000
          },
          body: {
            name: 'TusharC',
            age: 30
          }
        }), this.mod.$create({
          user: {
            sub: 1000
          },
          body: {
            name: 'TusharD',
            age: 30
          }
        }), this.mod.$create({
          user: {
            sub: 1001
          },
          body: {
            name: 'TusharE',
            age: 20
          }
        })
      ]);
    });
    describe("$create()", function() {
      beforeEach(function() {
        return this.out = this.mod.$create(this.req, this.res);
      });
      it('has owner', function() {
        return this.out.should.eventually.have.property('owner');
      });
      it('has _id', function() {
        return this.out.should.eventually.have.property('_id');
      });
      return it("calls the post create hook", function() {
        this.req.user.sub = 1234;
        this.req.body = {};
        sinon.stub(this.mod, 'postCreateHook').resolves('post-created-responses');
        return this.mod.$create(this.req).should.eventually.equal('post-created-responses');
      });
    });
    describe("$update()", function() {
      beforeEach(function() {
        var req;
        req = {
          user: {
            sub: 1234
          },
          body: {
            name: 'Tushar',
            age: 10
          }
        };
        return this.mod.$create(req).then((function(_this) {
          return function(obj) {
            return _this.req.params.id = obj._id;
          };
        })(this));
      });
      it('throws FORBIDDEN_DOCUMENT', function() {
        return this.mod.$update(this.req).should.be.rejectedWith(ErrorPool.FORBIDDEN_DOCUMENT);
      });
      it("updates doc", function() {
        this.req.user.sub = 1234;
        this.req.body.name = 'Mathur';
        return this.mod.$update(this.req).should.eventually.have.property('name').equal('Mathur');
      });
      it("deletes the _id before updating", function() {
        var spy;
        this.req.user.sub = 1234;
        this.req.body._id = 122;
        spy = sinon.spy(this.mod.getModel(), 'findByIdAndUpdate');
        return this.mod.$update(this.req).should.eventually.have.property('_id');
      });
      it("calls the post updated hook", function() {
        var spy;
        this.req.user.sub = 1234;
        this.req.body._id = 122;
        sinon.stub(this.mod, 'postUpdateHook').resolves('post-updated-responses');
        spy = sinon.spy(this.mod.getModel(), 'findByIdAndUpdate');
        return this.mod.$update(this.req).should.eventually.equal('post-updated-responses');
      });
      return it("throws when document is not found", function() {
        this.req.user.sub = 1001;
        this.req.params.id = this.mongo.mongoose.Types.ObjectId();
        return this.mod.$update(this.req).should.be.rejectedWith(ErrorPool.NOTFOUND_DOCUMENT);
      });
    });
    describe("$count()", function() {
      beforeEach(function() {
        return this.mod._filterKeys = ['age'];
      });
      it("gets count", function() {
        this.req.user.sub = 1000;
        return this.mod.$count(this.req).should.eventually.eql({
          count: 4
        });
      });
      return it("counts with query params", function() {
        this.req.user.sub = 1000;
        this.req.query = {
          age: 20
        };
        return this.mod.$count(this.req).should.eventually.eql({
          count: 2
        });
      });
    });
    describe("$list()", function() {
      beforeEach(function() {
        return this.mod._filterKeys = ['age'];
      });
      it("gets list", function() {
        this.req.user.sub = 1000;
        return this.mod.$list(this.req).should.eventually.be.of.length(4);
      });
      it("counts with query params", function() {
        this.req.user.sub = 1000;
        this.req.query = {
          age: 20
        };
        return this.mod.$list(this.req).should.eventually.be.of.length(2);
      });
      return it("ignores user.sub if its open for all", function() {
        this.req.user.sub = 10000;
        this.req.query = {
          age: 30
        };
        this.mod.hasListOwner = false;
        return this.mod.$list(this.req).should.eventually.be.of.length(2);
      });
    });
    describe("$remove()", function() {
      beforeEach(function() {
        return this.mod.$create({
          user: {
            sub: 1000
          },
          body: {
            name: 'TusharC',
            age: 30
          }
        }).then((function(_this) {
          return function(doc) {
            return _this.req.params.id = doc._id.toString();
          };
        })(this));
      });
      it("throws FORBIDDEN_DOCUMENT", function() {
        this.req.user.sub = 1001;
        return this.mod.$remove(this.req).should.be.rejectedWith(ErrorPool.FORBIDDEN_DOCUMENT);
      });
      it("throws when document is not found", function() {
        this.req.user.sub = 1001;
        this.req.params.id = this.mongo.mongoose.Types.ObjectId();
        return this.mod.$remove(this.req).should.be.rejectedWith(ErrorPool.NOTFOUND_DOCUMENT);
      });
      return it("removes the element", function() {
        this.req.user.sub = 1000;
        return this.mod.$remove(this.req).then((function(_this) {
          return function() {
            return _this.mod.getModel().find().execQ();
          };
        })(this)).should.eventually.have.length.of(5);
      });
    });
    return describe("$one()", function() {
      beforeEach(function() {
        return this.mod.$create({
          user: {
            sub: 1000
          },
          body: {
            name: 'TusharC',
            age: 30
          }
        }).then((function(_this) {
          return function(doc) {
            return _this.req.params.id = doc._id;
          };
        })(this));
      });
      it("throws FORBIDDEN_DOCUMENT", function() {
        this.req.user.sub = 1001;
        return this.mod.$one(this.req).should.be.rejectedWith(ErrorPool.FORBIDDEN_DOCUMENT);
      });
      it("returns element", function() {
        this.req.user.sub = 1000;
        return this.mod.$one(this.req).should.eventually.have.property('_id').eql(this.req.params.id);
      });
      return it("throws when document is not found", function() {
        this.req.user.sub = 1001;
        this.req.params.id = this.mongo.mongoose.Types.ObjectId();
        return this.mod.$one(this.req).should.be.rejectedWith(ErrorPool.NOTFOUND_DOCUMENT);
      });
    });
  });
});
