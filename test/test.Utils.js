// Generated by CoffeeScript 1.9.1
var Injector, Provide, annotate, ref, utils;

ref = require('di'), annotate = ref.annotate, Injector = ref.Injector, Provide = ref.Provide;

utils = require('../backend/Utils')();

describe('Utils:', function() {
  beforeEach(function() {
    this.injector = new Injector;
    return this.mod = utils;
  });

  /* TODO: Remove - subscriptions dont expire
  	describe "hasSubscriptionExpired()", ->
  		beforeEach ->
  			@subscription =
  				startDate: new Date 2012, 1, 2
  				campaign: days: 10
  
  		it "returns expired", ->
  			 * SubscriptionStartDate: 2 Feb 2012, lasts for 10 days
  			 * Current Date: 2014, Feb, 1
  			now = new Date 2014, 1, 1
  			@mod.hasSubscriptionExpired @subscription, now
  			.should.be.true
  
  		it "returns not expired", ->
  			 * SubscriptionStartDate: 2 Feb 2012
  			 * Current Date: 2010 Feb 1
  			now = new Date 2010, 1, 1
  			@mod.hasSubscriptionExpired @subscription, now
  			.should.be.false
  		it "returns no if its withing the campaign days", ->
  			 * SubscriptionStartDate: 2 Feb 2012
  			 * Current Date: 5 Feb 2012
  			now = new Date 2012, 1, 5
  			@mod.hasSubscriptionExpired @subscription, now
  			.should.be.false
  
  		it "returns yes if it is out of the campaign range", ->
  			 * SubscriptionStartDate: 2 Feb 2012
  			 * Current Date: 15 Feb 2012
  			now = new Date 2012, 1, 15
  			@mod.hasSubscriptionExpired @subscription, now
  			.should.be.true
  		it "throws if now is not provided", ->
  			expect => @mod.hasSubscriptionExpired @subscription, 12312
  			.to.throw 'now should be of date type'
   */
  describe("camelCasetoSnakeCase()", function() {
    it("ABC to abc", function() {
      return this.mod.camelCaseToSnakeCase('ABC').should.equal('a-b-c');
    });
    it("AbcDef to abc-def", function() {
      return this.mod.camelCaseToSnakeCase('AbcDef').should.equal('abc-def');
    });
    return it("abcDef to abc-def", function() {
      return this.mod.camelCaseToSnakeCase('abcDef').should.equal('abc-def');
    });
  });
  describe("snakeCasetoCamelCase()", function() {
    it("abc to Abc", function() {
      return this.mod.snakeCaseToCamelCase('abc').should.equal('Abc');
    });
    it("abc-def to AbcDef", function() {
      return this.mod.snakeCaseToCamelCase('abc-def').should.equal('AbcDef');
    });
    return it("--abc---def---- to AbcDef", function() {
      return this.mod.snakeCaseToCamelCase('--abc---def----').should.equal('AbcDef');
    });
  });
  return describe("getType()", function() {
    it("returns date", function() {
      return this.mod.getType(new Date).should.equal('Date');
    });
    it("returns number", function() {
      return this.mod.getType(12345).should.equal('Number');
    });
    it("returns string", function() {
      return this.mod.getType('qwerty').should.equal('String');
    });
    it("returns null", function() {
      return expect(this.mod.getType(null)).to.equal('null');
    });
    return it("returns undefined", function() {
      return expect(this.mod.getType(void 0)).to.equal('undefined');
    });
  });
});
