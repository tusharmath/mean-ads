// Generated by CoffeeScript 1.9.1
var DateProvider, ErrorPool, Injector, ModelFactory, MongooseProvider, MongooseProviderMock, Provide, Q, SubscriptionPopulator, _json, annotate, mockDataSetup, ref;

SubscriptionPopulator = require('../backend/modules/SubscriptionPopulator');

MongooseProviderMock = require('./mocks/MongooseProviderMock');

MongooseProvider = require('../backend/providers/MongooseProvider');

DateProvider = require('../backend/providers/DateProvider');

ModelFactory = require('../backend/factories/ModelFactory');

mockDataSetup = require('./mocks/MockData').mockDataSetup;

ref = require('di'), annotate = ref.annotate, Injector = ref.Injector, Provide = ref.Provide;

Q = require('q');

ErrorPool = require('../backend/config/error-codes').ErrorPool;

_json = function(obj) {
  return JSON.parse(JSON.stringify(obj));
};

describe('SubscriptionPopulator:', function() {
  beforeEach(function() {
    this.injector = new Injector([MongooseProviderMock]);
    this.mod = this.injector.get(SubscriptionPopulator);
    this.mod.Models = {};
    this.mongo = this.injector.get(MongooseProvider);
    this.date = this.injector.get(DateProvider);
    this.Models = this.injector.get(ModelFactory);
    return this.mockDataSetup = mockDataSetup;
  });
  afterEach(function() {
    return this.mongo.__reset();
  });
  return describe("populateSubscription()", function() {
    beforeEach(function() {
      return this.mockDataSetup();
    });
    it("populates subscription.campaign", function() {
      return this.mod.populateSubscription(this.subscription._id).then((function(_this) {
        return function(sub) {
          return sub.campaign._id.should.eql(_this.campaign._id);
        };
      })(this));
    });
    it("populates campaign.program", function() {
      return this.mod.populateSubscription(this.subscription._id).then((function(_this) {
        return function(sub) {
          return sub.campaign.program._id.should.eql(_this.program._id);
        };
      })(this));
    });
    it("populates program.style", function() {
      return this.mod.populateSubscription(this.subscription._id).then((function(_this) {
        return function(sub) {
          return sub.campaign.program.style._id.should.eql(_this.style._id);
        };
      })(this));
    });
    return it("resolves to null if subscription is not found", function() {
      return this.mod.populateSubscription(this.mongo.mongoose.Types.ObjectId()).should.eventually.equal(null);
    });
  });
});
