// Generated by CoffeeScript 1.9.1
var RouteResolveProvider, app,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

app = require('./app');

RouteResolveProvider = (function() {
  function RouteResolveProvider() {
    this.resolve = bind(this.resolve, this);
  }

  RouteResolveProvider.prototype.$get = function() {
    return {
      resolve: this.resolve
    };
  };

  RouteResolveProvider.prototype.getTemplateUrl = function(resource, action) {
    var action_lc, resource_lc;
    resource_lc = resource.toLowerCase();
    action_lc = action.toLowerCase();
    switch (action_lc) {
      case 'index':
        return "templates/" + resource_lc + "-tmpl";
      case 'create':
        return "templates/" + resource_lc + "s/alter-tmpl";
      case 'update':
        return "templates/" + resource_lc + "s/alter-tmpl";
      default:
        return "templates/" + resource_lc + "s/" + action_lc + "-tmpl";
    }
  };

  RouteResolveProvider.prototype.getController = function(resource, action) {
    var action_lc, resource_lc;
    resource_lc = resource.toLowerCase();
    action_lc = action.toLowerCase();
    switch (action_lc) {
      case 'index':
        return resource + "Ctrl as ctrl";
      case 'create':
        return resource + "AlterCtrl as ctrl";
      case 'update':
        return resource + "AlterCtrl as ctrl";
      default:
        return "" + resource + action + "Ctrl as ctrl";
    }
  };

  RouteResolveProvider.prototype.getRoute = function(resource, action) {
    var resourcePath;
    resourcePath = resource.toLowerCase();
    switch (action) {
      case 'Index':
        return "/" + resourcePath;
      case 'List':
        return "/" + resourcePath + "s";
      case 'Create':
        return "/" + resourcePath + "s/create";
      default:
        return "/" + resourcePath + "s/:id/" + (action.toLowerCase());
    }
  };

  RouteResolveProvider.prototype.resolve = function(routeProvider, resource, options) {
    var _options, actions;
    if (options == null) {
      options = {};
    }
    _options = {
      actions: ['Index']
    };
    actions = _.assign(_options, options).actions;
    return _.each(actions, (function(_this) {
      return function(action) {
        var controller, route, templateUrl;
        templateUrl = _this.getTemplateUrl(resource, action);
        controller = _this.getController(resource, action);
        route = _this.getRoute(resource, action);
        return routeProvider.when(route, {
          templateUrl: templateUrl,
          controller: controller
        });
      };
    })(this));
  };

  return RouteResolveProvider;

})();

app.provider('RouteResolver', RouteResolveProvider);
