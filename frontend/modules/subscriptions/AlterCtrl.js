// Generated by CoffeeScript 1.9.1
var SubscriptionAlterCtrl, app,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

app = require('../../app');

SubscriptionAlterCtrl = (function() {
  function SubscriptionAlterCtrl(rest, alter, q) {
    this.rest = rest;
    this.alter = alter;
    this.q = q;
    this.addEmail = bind(this.addEmail, this);
    this.removeEmail = bind(this.removeEmail, this);
    this.onCampaignSelect = bind(this.onCampaignSelect, this);
    this._setEstimations = bind(this._setEstimations, this);
    this._reduceCost = bind(this._reduceCost, this);
    this._loadStyle = bind(this._loadStyle, this);
    this._loadProgram = bind(this._loadProgram, this);
    this._loadCampaign = bind(this._loadCampaign, this);
    this.alter.bootstrap(this, 'subscription').then((function(_this) {
      return function() {
        if (!_this.subscription.keywords) {
          return _this.subscription.keywords = [];
        }
      };
    })(this));
    this.costPerTransaction = this.throughput = 0;
    this.rest.all('campaigns').getList().then((function(_this) {
      return function(campaigns) {
        _this.campaigns = campaigns;
        return _this.onCampaignSelect();
      };
    })(this));
  }

  SubscriptionAlterCtrl.prototype._loadCampaign = function() {
    return this.rest.one('campaign', this.subscription.campaign).get();
  };

  SubscriptionAlterCtrl.prototype._loadProgram = function(campaign) {
    this.campaign = campaign;
    return this.rest.one('program', this.campaign.program).get();
  };

  SubscriptionAlterCtrl.prototype._loadStyle = function(program) {
    this.program = program;
    return this.rest.one('style', this.program.style).get().then((function(_this) {
      return function(style) {
        _this.style = style;
      };
    })(this));
  };

  SubscriptionAlterCtrl.prototype._reduceCost = function(totalCost, keyName) {
    var keywordPrice;
    if (!this.campaign) {
      return 0;
    }
    keywordPrice = _.find(this.campaign.keywordPricing, (function(_this) {
      return function(keywordPrice) {
        return keywordPrice.keyName === keyName;
      };
    })(this));
    if (keywordPrice) {
      return totalCost += Number(keywordPrice.keyPrice);
    } else {
      return totalCost += this.campaign.defaultCost || 0;
    }
  };

  SubscriptionAlterCtrl.prototype._setEstimations = function() {
    var totalCost;
    totalCost = _.reduce(this.subscription.keywords, this._reduceCost, 0);
    if (totalCost > 0 && this.subscription.keywords.length > 0) {
      this.costPerTransaction = totalCost / this.subscription.keywords.length;
      return this.throughput = this.subscription.totalCredits / this.costPerTransaction;
    } else {
      return this.costPerTransaction = this.throughput = 0;
    }
  };

  SubscriptionAlterCtrl.prototype.onCampaignSelect = function() {
    if (this.subscription.campaign) {
      return this._loadCampaign().then(this._loadProgram).then(this._loadStyle).then(this._setEstimations);
    }
  };

  SubscriptionAlterCtrl.prototype.removeEmail = function(email) {
    return _.remove(this.subscription.emailAccess, function(s) {
      return s === email;
    });
  };

  SubscriptionAlterCtrl.prototype.addEmail = function() {
    if (this.newEmailAccess) {
      if (!this.subscription.email) {
        this.subscription.emailAccess = [];
      }
      this.subscription.emailAccess.push(this.newEmailAccess);
      return this.newEmailAccess = '';
    }
  };

  SubscriptionAlterCtrl.prototype.removeKeyword = function(keyword) {
    _.remove(this.subscription.keywords, function(s) {
      return s === keyword;
    });
    return this._setEstimations();
  };

  SubscriptionAlterCtrl.prototype.addKeyword = function() {
    if (!this.subscription.keywords) {
      this.subscription.keywords = [];
    }
    if (this.newKeyword) {
      this.subscription.keywords.push(this.newKeyword);
      this.newKeyword = null;
      return this._setEstimations();
    }
  };

  return SubscriptionAlterCtrl;

})();

SubscriptionAlterCtrl.$inject = ["Restangular", "AlterControllerExtensionService", '$q'];

app.controller('SubscriptionAlterCtrl', SubscriptionAlterCtrl);
