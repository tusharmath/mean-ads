// Generated by CoffeeScript 1.9.1
var SubscriptionMetricsCtrl, app,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

app = require('../../app');

SubscriptionMetricsCtrl = (function() {
  function SubscriptionMetricsCtrl(rest, route, $q) {
    this.rest = rest;
    this.route = route;
    this.sendEmail = bind(this.sendEmail, this);
    this.rest.one('subscription', this.route.id).get().then((function(_this) {
      return function(subscription) {
        _this.subscription = subscription;
        return _this.rest.one('campaign', _this.subscription.campaign).get();
      };
    })(this)).then((function(_this) {
      return function(campaign) {
        _this.campaign = campaign;
        return _this.rest.one('program', _this.campaign.program).get();
      };
    })(this)).then((function(_this) {
      return function(program) {
        var elapsedTime_ms;
        _this.program = program;
        elapsedTime_ms = new Date() - new Date(_this.subscription.startDate);
        _this.elapsedTime_days = Math.floor(elapsedTime_ms / (24 * 3600 * 1000));
        _this.isInActive = _this.subscription.totalCredits === _this.subscription.usedCredits;
        _this.creditAnticipation = _this.subscription.totalCredits / _this.campaign.days * _this.elapsedTime_days;
        _this.creditPotentialUsage = _this.subscription.usedCredits / _this.elapsedTime_days * _this.campaign.days;
        _this.fulfillment = 100 * _this.creditPotentialUsage / _this.subscription.totalCredits;
        return _this.isExpired = _this.elapsedTime_days >= _this.campaign.days;
      };
    })(this));
  }

  SubscriptionMetricsCtrl.prototype.sendEmail = function() {
    return this.rest.one('subscription', this.route.id).post('email');
  };

  return SubscriptionMetricsCtrl;

})();

SubscriptionMetricsCtrl.$inject = ['Restangular', '$routeParams', '$q'];

app.controller('SubscriptionMetricsCtrl', SubscriptionMetricsCtrl);
