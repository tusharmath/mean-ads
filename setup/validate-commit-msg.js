// Generated by CoffeeScript 1.9.1

/*
Git COMMIT-MSG hook for validating commit message
See https://docs.google.com/document/d/1rk04jEuGfk9kYzfqCuOlPTSJw3hEDZJTBN5E5f1SALo/edit

Installation:
>> ln -s ../../validate-commit-msg.coffee .git/hooks/commit-msg
 */
"use strict";
var IGNORED, MAX_LENGTH, PATTERN, TYPES, commitMsgFile, error, firstLineFromBuffer, fs, incorrectLogFile, util, validateMessage;

fs = require("fs");

util = require("util");

MAX_LENGTH = 100;

PATTERN = /^(?:fixup!\s*)?(\w*)(\(([\w\$\.\*\/-]*)\))?\: (.*)$/;

IGNORED = /^WIP\:/;

TYPES = {
  feat: true,
  fix: true,
  docs: true,
  style: true,
  refactor: true,
  perf: true,
  test: true,
  chore: true,
  revert: true,
  release: true
};

error = function() {
  console.error("INVALID COMMIT MSG: " + util.format.apply(null, arguments));
};

validateMessage = function(message) {
  var isValid, match, scope, subject, type;
  isValid = true;
  if (IGNORED.test(message)) {
    console.log("Commit message validation ignored.");
    return true;
  }
  if (message.length > MAX_LENGTH) {
    error("is longer than %d characters !", MAX_LENGTH);
    isValid = false;
  }
  match = PATTERN.exec(message);
  if (!match) {
    error("does not match \"<type>(<scope>): <subject>\" ! was: " + message);
    return false;
  }
  type = match[1];
  scope = match[3];
  subject = match[4];
  if (!TYPES.hasOwnProperty(type)) {
    error("\"%s\" is not allowed type !", type);
    return false;
  }
  return isValid;
};

firstLineFromBuffer = function(buffer) {
  return buffer.toString().split("\n").shift();
};

exports.validateMessage = validateMessage;

if (process.argv.join("").indexOf("jasmine-node") === -1) {
  commitMsgFile = process.argv[2];
  incorrectLogFile = commitMsgFile.replace("COMMIT_EDITMSG", "logs/incorrect-commit-msgs");
  fs.readFile(commitMsgFile, function(err, buffer) {
    var msg;
    msg = firstLineFromBuffer(buffer);
    if (!validateMessage(msg)) {
      fs.appendFile(incorrectLogFile, msg + "\n", function() {
        process.exit(1);
      });
    } else {
      process.exit(0);
    }
  });
}
